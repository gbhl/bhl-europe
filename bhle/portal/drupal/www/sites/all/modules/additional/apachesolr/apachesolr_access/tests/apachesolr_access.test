<?php

class DrupalApacheSolrNodeAccess extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => 'Node Access',
      'description' => 'Test Access Control',
      'group' => 'ApacheSolr'
    );
  }

  function setUp() {
    parent::setUp('node_access_test', 'apachesolr', 'apachesolr_search', 'apachesolr_access');

     // Create a basic user, which is subject to moderation.
    $permissions = array(
      'access content',
      'create page content',
      'edit own page content',
      'create article content',
      'edit own article content',
    );
    $this->basic_user = $this->drupalCreateUser($permissions);
  }

  function testIndexing() {
    $basic_user = $this->basic_user;
    // Login as basic user to perform initial content creation.

    //Create 2 nodes
    $edit = array();
    $edit['uid'] = $basic_user->uid;
    $role_restricted_node = $this->drupalCreateNode($edit);

    $edit = array();
    $edit['uid'] = $basic_user->uid;
    $author_restricted_node = $this->drupalCreateNode($edit);
    // Delete the generic node access grant for all nodes.
    db_delete('node_access')->condition('nid', '0')->execute();

    $roles = array_keys($basic_user->roles);
    // The assigned role will be the last in the array.
    $assigned_role = end($roles);
    $role_grant = array(
        'gid' => $assigned_role,
        'realm' => 'nodeaccess_rid',
        'grant_view' => '1',
        'grant_update' => '0',
        'grant_delete' => '0',
    );
    node_access_write_grants($role_restricted_node, array($role_grant));

    $author_grant = array(
        'gid' => $basic_user->uid,
        'realm' => 'nodeaccess_author',
        'grant_view' => '1',
        'grant_update' => '0',
        'grant_delete' => '0',
    );

    node_access_write_grants($author_restricted_node, array($author_grant));

    // This loads the document class too.
    $solr = apachesolr_get_solr();

    $document = new ApacheSolrDocument();
    apachesolr_access_apachesolr_update_index($document, $role_restricted_node, 'apachesolr_search');
    $field = 'access_node_' . apachesolr_site_hash() . '_nodeaccess_rid';
    $this->assertEqual($document->{$field}[0], $assigned_role, 'Solr Document being indexed is restricted by the proper role' . print_r(db_query('SELECT * FROM {node_access}')->fetchAllAssoc('nid'),1));
    $this->drupalGet('node');

    $document = new ApacheSolrDocument();
    apachesolr_access_apachesolr_update_index($document, $author_restricted_node, 'apachesolr_search');
    $field = 'access_node_' . apachesolr_site_hash() . '_nodeaccess_author';
    $this->assertEqual($document->{$field}[0], $basic_user->uid, 'Solr Document being indexed is restricted by the proper author');
 
    // Test addition of filters to query.
    $subquery = apachesolr_access_build_subquery($basic_user);

    $expected_criterion = array(
      'access__all' => 0,
      'access_node_' . apachesolr_site_hash() . '_all' => 0,
      // @todo - we need to check grants provided by node_access_test module.
 //     'access_node_' . apachesolr_site_hash() . '_nodeaccess_rid' => array(2, $assigned_role),
 //     'access_node_' . apachesolr_site_hash() . '_nodeaccess_uid' => $basic_user->uid,
 //     'access_node_' . apachesolr_site_hash() . '_nodeaccess_author' => $basic_user->uid,
    );

    $fields = $subquery->getFilters();

    foreach ($fields as $field) {
      if (is_array($expected_criterion[$field['#name']])) {
        $this->assertTrue(in_array($field['#value'], $expected_criterion[$field['#name']]), t('Expected node access grant @name == @value found', array('@name' => $field['#name'], '@value' => $field['#value'])));
        //This is sorta a bug
        $found_criterion[$field['#name']] = $expected_criterion[$field['#name']];
      }
      else {
        $this->assertEqual($field['#value'], $expected_criterion[$field['#name']], t('Expected node access grant @name == @value found', array('@name' => $field['#name'], '@value' => $field['#value'])));
        $found_criterion[$field['#name']] = $expected_criterion[$field['#name']];
      }
    }

    $this->assertEqual($expected_criterion, $found_criterion, 'All Criteria was accounted for in fields. If not accounted for, Unaccounted Criteria [' . var_export(array_diff($expected_criterion, $found_criterion), 1) . ']');
  }
}
