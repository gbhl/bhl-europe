<?php

/**
 * Implements hook_help().
 */
function search_api_facets_help($path, array $arg) {
  if ($path == 'admin/config/search/search_api/index/%/facets') {
    return t('Select the indexed fields for which you want to create facet blocks. ' .
        'Before facet blocks are actually displayed, you will have to enable and configure them at the <a href="!url">block administration page</a>.',
        array('!url' => url('admin/structure/block')));
  }
}

/**
 * Implements hook_menu().
 */
function search_api_facets_menu() {
  $items['admin/config/search/search_api/index/%search_api_index/facets'] = array(
    'title' => 'Facets',
    'description' => 'Select the facet blocks to display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_facets_index_select', 5),
    'access arguments' => array('administer search_api'),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
    'file' => 'search_api_facets.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function search_api_facets_theme() {
  $themes['search_api_facets_form_table'] = array(
    'render element' => 'element',
    'file' => 'search_api_facets.admin.inc',
  );
  $themes['search_api_facets_list'] = array(
    'variables' => array(
      'terms' => array(),
      'hidden' => array(),
      'active' => array(),
    ),
    'file' => 'search_api_facets.theme.inc',
  );
  $themes['search_api_facets_facet'] = array(
    'variables' => array(
      'name' => '',
      'field' => '',
      'count' => 0,
      'path' => NULL,
      'options' => array(),
      'active' => FALSE,
    ),
    'file' => 'search_api_facets.theme.inc',
  );
  $themes['search_api_facets_current_search'] = array(
    'variables' => array(
      'index' => NULL,
      'keys' => '',
      'count' => 0,
      'path' => NULL,
      'options' => array(),
      'filters' => array(),
    ),
    'file' => 'search_api_facets.theme.inc',
  );

  return $themes;
}

/**
 * Implements hook_entity_info().
 */
function search_api_facets_entity_info() {
  $info['search_api_facet'] = array(
    'label' => t('Search facet'),
    'controller class' => 'EntityAPIControllerExportable',
    'entity class' => 'SearchApiFacet',
    'base table' => 'search_api_facet',
    'uri callback' => 'search_api_facet_url',
    'module' => 'search_api_facets',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'delta',
      'label' => 'name',
    ),
  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function search_api_facets_permission() {
  return array(
    'use search_api_facets' => array(
      'title' => t('Use search facets'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function search_api_facets_block_info() {
  $blocks = array(
    'current-search' => array(
      'info'   => t('Current search'),
      'cache'  => DRUPAL_NO_CACHE,
      'weight' => 4,
    ),
  );
  $facets = search_api_facet_load_multiple(FALSE, array('enabled' => 1));
  foreach ($facets as $facet) {
    $blocks[$facet->delta]['info'] = $facet->name;
    // It will hardly ever be possible to cache facet blocks sensibly.
    $blocks[$facet->delta]['cache'] = DRUPAL_NO_CACHE;
    // Use this so facet blocks are initially grouped together.
    $blocks[$facet->delta]['weight'] = 5;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function search_api_facets_block_configure($delta = '') {
  if ($delta == 'current-search') {
    return search_api_facets_block_current_search_configure();
  }
  $facet = search_api_facet_load($delta);
  if (!$facet) {
    return array();
  }
  $index = search_api_index_load($facet->index_id);
  if (!$index || empty($index->options['fields'][$facet->field])) {
    drupal_set_message(t("This facet's index field is unknown."), 'error');
    return array();
  }
  $field = $index->options['fields'][$facet->field];
  $options = $facet->options;

  $form['#element_validate'][] = 'search_api_facets_block_configure_validate';
  $form['index_description'] = array(
    '#type' => 'item',
    '#title' => t('Search index'),
    '#description' => l($index->name, 'admin/config/search/search_api/index/' . $index->machine_name),
  );
  $form['field_description'] = array(
    '#type' => 'item',
    '#title' => t('Field'),
    '#description' => check_plain($field['name']),
  );
  $form['limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of terms'),
    '#description' => t('The maximum number of facet terms to be initially displayed in this block. Leave blank or set to 0 for no limit.'),
    '#default_value' => $options['limit'],
  );
  $form['display_more_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display "More" link for showing additional facet terms'),
    '#default_value' => $options['display_more_link'],
  );
  $form['more_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Total number of terms'),
    '#description' => t('The maximum number of facet terms to be displayed in this block after the "More" link is clicked. Leave blank or set to 0 for no limit.'),
    '#states' => array(
      'invisible' => array(
        'input[name="display_more_link"]' => array('checked' => FALSE),
      ),
    ),
    '#default_value' => $options['more_limit'],
  );
  $form['min_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum result count'),
    '#description' => t('The minimum number of results a facet value has to have in order to be displayed.'),
    '#default_value' => $options['min_count'],
  );
  $form['sort'] = array(
    '#type' => 'select',
    '#title' => t('Order'),
    '#options' => array(
      'count' => t('Order by result count'),
      'name' => t('Order by name'),
    ),
    '#default_value' => $options['sort'],
  );
  $form['missing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include "missing" facet'),
    '#description' => t('Include a facet term for all results without a value for this field.'),
    '#default_value' => $options['missing'],
  );
  $form['show_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show active facet links'),
    '#description' => t('Display the facet links that were already clicked for this facet.'),
    '#default_value' => $options['show_active'],
  );

  $search_ids = variable_get('search_api_facets_search_ids', array());
  if (empty($search_ids[$index->machine_name]) || count($search_ids[$index->machine_name]) <= 1) {
    $form['default_true'] = array(
      '#type' => 'value',
      '#value' => $options['default_true'],
    );
    $form['ids_list'] = array(
      '#type' => 'value',
      '#value' => $options['ids_list'],
    );
  }
  else {
    $form['default_true'] = array(
      '#type' => 'select',
      '#title' => t('Display for searches'),
      '#options' => array(
        TRUE => t('For all except the selected'),
        FALSE => t('Only for the selected'),
      ),
      '#default_value' => $options['default_true'],
    );
    $form['ids_list'] = array(
      '#type' => 'select',
      '#title' => t('Search IDs'),
      '#options' => $search_ids[$index->machine_name],
      '#size' => min(4, count($search_ids[$index->machine_name])),
      '#multiple' => TRUE,
      '#default_value' => $options['ids_list'],
    );
  }

  $form['facet'] = array(
    '#type' => 'value',
    '#value' => $facet,
  );

  return $form;
}

/**
 * Validation function for search_api_facets_block_configure().
 */
function search_api_facets_block_configure_validate(array $element, array &$form_state) {
  $limit = $element['limit']['#value'];
  if ($limit && (!is_numeric($limit) || $limit < 0 || strpos($limit, '.') !== FALSE)) {
    form_error($element['limit'], t('The number of terms has to be a non-negative integer, or left blank.'));
  }
  $min_count = $element['min_count']['#value'];
  if (!$min_count || !is_numeric($min_count) || $min_count <= 0 || strpos($min_count, '.') !== FALSE) {
    form_error($element['min_count'], t('The minimum count has to be a positive integer.'));
  }
  $display_more_link = $element['display_more_link']['#value'];
  $more_limit = $element['more_limit']['#value'];
  if ($display_more_link && $more_limit && (!is_numeric($more_limit) || $more_limit <= 0 || strpos($more_limit, '.') !== FALSE)) {
    form_error($element['limit'], t('The total number of terms has to be a non-negative integer, or left blank.'));
  }
}

/**
 * Implements hook_block_save().
 */
function search_api_facets_block_save($delta = '', array $edit = array()) {
  if ($delta == 'current-search') {
    return search_api_facets_block_current_search_save($edit);
  }
  $facet = $edit['facet'];
  $options = $facet->options;
  foreach ($options as $key => $value) {
    if (isset($edit[$key])) {
      $options[$key] = $edit[$key];
    }
  }
  // We refresh the options each time the form is saved. Similar behaviour exists for modules, menus, blocks and themes, so â€“ why not?
  if (empty($options['type']) || $options['type'] == 'options') {
    _search_api_facets_refresh_type($facet, $options);
  }
  if ($options != $facet->options) {
    $facet->options = $options;
    $facet->save();
  }
}

/**
 * Implements hook_block_view().
 */
function search_api_facets_block_view($delta = '') {
  if (!user_access('use search_api_facets')) {
    return;
  }
  if ($delta == 'current-search') {
    return search_api_facets_block_current_search_view();
  }
  // Since we already computed the active facets when altering the search queries, we don't do it again here.
  $search_ids = drupal_static('search_api_facets_search_api_query_alter', array());
  if (empty($search_ids[$delta]) || !search_api_current_search($search_ids[$delta])) {
    return;
  }
  $search_id = $search_ids[$delta];
  list($query, $results) = search_api_current_search($search_id);

  $facet = search_api_facet_load($delta);
  if (!$facet->enabled) {
    return;
  }
  $options = $facet->options;

  // Get active facet filters for this query.
  $num = count(search_api_current_search());
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));
  $filter_name = $num > 1 ? 'filter_' . $search_id : 'filter';
  $filters = isset($params[$filter_name]) ? $params[$filter_name] : array();
  if (!$filters && $num == 1 && isset($params['filter_' . $search_id])) {
    $filter_name = 'filter_' . $search_id;
    $filters = $params[$filter_name];
  }
  $filters = empty($filters[$facet->field]) ? array() : $filters[$facet->field];

  // Bail early if there is nothing to do.
  if (empty($results['search_api_facets'][$delta]) && (empty($filters) || !$options['show_active'])) {
    return;
  }
  $terms = empty($results['search_api_facets'][$delta]) ? array() : $results['search_api_facets'][$delta];

  // Get type information for later name-generation.
  if (empty($options['type'])) {
    _search_api_facets_refresh_type($facet, $options);
    $facet->options = $options;
    $facet->save();
  }
  $type = $options['type'];
  $values = isset($options['options']) ? $options['options'] : array();
  if (!$values && isset($options['entity_type']) && entity_get_info($options['entity_type'])) {
    $ids = array();
    foreach ($terms as $term) {
      if ($term['filter'][0] == '"') {
        $ids[] = substr($term['filter'], 1, -1);
      }
    }
    foreach ($filters as $filter) {
      if ($filter[0] == '"') {
        $ids[] = substr($filter, 1, -1);
      }
    }
    if ($ids) {
      $entities = entity_load($options['entity_type'], $ids);
      if ($entities) {
        $values = array();
        foreach ($entities as $id => $entity) {
          $label = entity_label($options['entity_type'], $entity);
          if ($label) {
            $values[$id] = $label;
          }
        }
        $facet->options['options'] = $values;
      }
    }
  }

  // Process available facet terms.
  foreach ($terms as $i => &$term) {
    $term = (object) $term;
    $term->name = _search_api_create_filter_name($term->filter, $type, $values);
    $term->iname = drupal_strtolower($term->name);
    if ($filters && array_search($term->filter, $filters) !== FALSE) {
      unset($terms[$i]);
      continue;
    }
    $term->params = $params;
    $term->params[$filter_name][$facet->field][] = $term->filter;
  }
  unset($term);
  if ($terms && $options['sort'] == 'name') {
    usort($terms, '_search_api_facets_compare_iname');
  }

  // Process active facet filters.
  $active = array();
  if ($options['show_active']) {
    foreach ($filters as $i => $v) {
      $filter = new stdClass();
      $filter->name = _search_api_create_filter_name($v, $type, $values);
      $filter->params = $params;
      unset($filter->params[$filter_name][$facet->field][$i]);
      $active[] = $filter;
    }
  }

  if (!($terms || $active)) {
    return;
  }

  $theme_suffix  = '';
  $theme_suffix .= '__' . preg_replace('/\W+/', '_', $query->getIndex()->entity_type);
  $theme_suffix .= '__' . preg_replace('/\W+/', '_', $facet->field);
  $theme_suffix .= '__' . preg_replace('/\W+/', '_', $facet->delta);
  $theme = array(
    '#theme'  => 'search_api_facets_list' . $theme_suffix,
    '#terms'  => array(),
    '#hidden' => array(),
    '#active' => array(),
  );

  $count = 0;
  $limit = $options['limit'];
  foreach ($terms as $term) {
    ++$count;
    // When limit is set blank or to 0, we want to display all terms.
    $key = ($limit > 0 && $count > $limit) ? '#hidden' : '#terms';
    $theme[$key][] = array(
      '#theme'   => 'search_api_facets_facet' . $theme_suffix,
      '#name'    => $term->name,
      '#count'   => $term->count,
      '#path'    => $_GET['q'],
      '#options' => array('query' => $term->params),
      '#active'  => FALSE,
    );
  }
  if ($theme['#hidden']) {
    drupal_add_js(drupal_get_path('module', 'search_api_facets') . '/search_api_facets.js');
  }
  foreach ($active as $filter) {
    $theme['#active'][] = array(
      '#theme'   => 'search_api_facets_facet' . $theme_suffix,
      '#name'    => $filter->name,
      '#count'   => 0,
      '#path'    => $_GET['q'],
      '#options' => array('query' => $filter->params),
      '#active'  => TRUE,
    );
  }

  return array(
    'subject' => $facet->options['field_name'],
    'content' => $theme,
  );
}

/**
 * Block configuration form for the "Current search" block.
 */
function search_api_facets_block_current_search_configure() {
  $options = search_api_facets_current_search_options();
  $form['label'] = array(
    '#type' => 'select',
    '#title' => t('Label for active filters'),
    '#options' => array(
      'field' => t('Field name'),
      'facet' => t('Facet name'),
      'none' => t('None'),
    ),
    '#default_value' => $options['label'],
  );
  $search_ids = variable_get('search_api_facets_search_ids', array());
  $ids = array();
  foreach ($search_ids as $index_ids) {
    $ids += $index_ids;
  }
  if (count($ids) > 1) {
    $form['default_true'] = array(
      '#type' => 'select',
      '#title' => t('Display for searches'),
      '#options' => array(
        TRUE => t('For all except the selected'),
        FALSE => t('Only for the selected'),
      ),
      '#default_value' => $options['default_true'],
    );
    $form['ids_list'] = array(
      '#type' => 'select',
      '#title' => t('Search IDs'),
      '#options' => $ids,
      '#size' => min(4, count($ids)),
      '#multiple' => TRUE,
      '#default_value' => $options['ids_list'],
    );
  }
  else {
    $form['default_true'] = array(
      '#type' => 'value',
      '#value' => TRUE,
    );
    $form['ids_list'] = array(
      '#type' => 'value',
      '#value' => array(),
    );
  }

  return $form;
}

/**
 * Save the configuration form for the "Current search" block.
 */
function search_api_facets_block_current_search_save(array $edit = array()) {
  $options = search_api_facets_current_search_options();
  foreach ($options as $key => $value) {
    if (isset($edit[$key])) {
      $options[$key] = $edit[$key];
    }
  }
  variable_set('search_api_facets_current_search_options', $options);
}

/**
 * View the "Current search" block.
 */
function search_api_facets_block_current_search_view() {
  $current_searches = search_api_current_search();
  if (empty($current_searches)) {
    return;
  }
  $theme = array();
  $options = search_api_facets_current_search_options();
  $ids_list = drupal_map_assoc($options['ids_list']);
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));
  $num = count(search_api_current_search());
  $path = $_GET['q'];

  foreach ($current_searches as $search_id => $data) {
    if ($options['default_true'] == isset($ids_list[$search_id])) {
      continue;
    }
    list ($query, $results) = $data;
    $filter_name = $num > 1 ? 'filter_' . $search_id : 'filter';
    $filters = isset($params[$filter_name]) ? $params[$filter_name] : array();
    if (!$filters && $num == 1 && isset($params['filter_' . $search_id])) {
      $filter_name = 'filter_' . $search_id;
      $filters = $params[$filter_name];
    }
    $index = $query->getIndex();
    $keys = $query->getOriginalKeys();
    if (is_array($keys)) {
      // We could also create a text representation of any complex query without too much effort.
      $keys = '[' . t('complex query') . ']';
    }
    $base_params = $params;
    unset($base_params[$filter_name]);
    $filter_links = array();
    foreach ($filters as $field => $field_filters) {
      $facets = search_api_facet_load_multiple(FALSE, array('index_id' => $index->machine_name, 'field' => $field));
      if (!$facets) {
        $name = isset($index->options['fields'][$field]['name']) ? $index->options['fields'][$field]['name'] : $field;
        $facet = new SearchApiFacet(array(
          'name' => $name,
          'index_id' => $index->machine_name,
          'field' => $field,
          'options' => array(),
        ));
        _search_api_facets_refresh_type($facet, $facet->options);
      }
      else {
        $facet = reset($facets);
        if (empty($facet->options['type'])) {
          _search_api_facets_refresh_type($facet, $facet->options);
          $facet->save();
        }
      }
      $type = $facet->options['type'];
      $values = isset($facet->options['options']) ? $facet->options['options'] : array();
      $field_name = '';
      if ($options['label'] == 'field') {
        $field_name = isset($index->options['fields'][$field]['name']) ? $index->options['fields'][$field]['name'] : $field;
      }
      elseif ($options['label'] == 'facet') {
        $field_name = $facet->name;
      }

      if (!$values && isset($facet->options['entity_type'])) {
        $ids = array();
        foreach ($field_filters as $i => $v) {
          if ($v[0] == '"') {
            $ids[] = substr($v, 1, -1);
          }
        }
        if ($ids) {
          $entities = entity_load($facet->options['entity_type'], $ids);
          if ($entities) {
            $values = array();
            foreach ($entities as $id => $entity) {
              $label = entity_label($facet->options['entity_type'], $entity);
              if ($label) {
                $values[$id] = $label;
              }
            }
          }
        }
      }

      $theme_suffix  = '';
      $theme_suffix .= '__' . preg_replace('/\W+/', '_', $index->entity_type);
      $theme_suffix .= '__' . preg_replace('/\W+/', '_', $field);
      $theme_suffix .= '__' . preg_replace('/\W+/', '_', $facet->delta);
      foreach ($field_filters as $i => $v) {
        $filter = array(
          '#theme'   => 'search_api_facets_facet' . $theme_suffix,
          '#name'    => _search_api_create_filter_name($v, $type, $values),
          '#field'   => $field_name,
          '#count'   => 0,
          '#path'    => $path,
          '#options' => array('query' => $params),
          '#active'  => TRUE,
        );
        unset($filter['#options']['query'][$filter_name][$field][$i]);
        $filter_links[] = $filter;
      }
    }

    $theme[$search_id] = array(
      '#theme' => 'search_api_facets_current_search',
      '#index' => $index,
      '#keys' => $keys,
      '#count' => $results['result count'],
      '#path' => $path,
      '#options' => array('query' => $base_params),
      '#filters' => $filter_links,
    );
  }

  if (empty($theme)) {
    return;
  }
  return array(
    'subject' => t('Current search'),
    'content' => $theme,
  );
}

/**
 * Helper function for getting the options for the "Current search" block.
 */
function search_api_facets_current_search_options() {
  $options = variable_get('search_api_facets_current_search_options', array());
  $options += array(
    'label' => 'field',
    'default_true' => TRUE,
    'ids_list' => array(),
  );
  if (isset($options['field_name'])) {
    $options['label'] = $options['field_name'] ? 'facet' : 'none';
    unset($options['field_name']);
    variable_set('search_api_facets_current_search_options', $options);
  }
  return $options;
}

/**
 * Implements hook_search_api_query_alter().
 */
function search_api_facets_search_api_query_alter(SearchApiQueryInterface $query) {
  if (!user_access('use search_api_facets')) {
    return;
  }
  // Add facet fields to query.
  $index_id = $query->getIndex()->machine_name;
  $facets = search_api_facet_load_multiple(FALSE, array('index_id' => $index_id, 'enabled' => TRUE));
  $fields = array();
  // Save the active facets for later retrieval when generating blocks.
  $active = &drupal_static(__FUNCTION__, array());
  $search_id = $query->getOption('search id');
  foreach ($facets as $facet) {
    if (array_search($search_id, $facet->options['ids_list']) === FALSE) {
      $search_ids = variable_get('search_api_facets_search_ids', array());
      if (empty($search_ids[$index_id][$search_id])) {
        // Remember this search ID.
        $search_ids[$index_id][$search_id] = $search_id;
        variable_set('search_api_facets_search_ids', $search_ids);
      }
      if (!$facet->options['default_true']) {
        continue; // Facet doesn't match.
      }
    }
    elseif ($facet->options['default_true']) {
      continue; // Facet doesn't match.
    }
    $active[$facet->delta] = $search_id;
    $fields[$facet->delta] = array(
      'field'     => $facet->field,
      'limit'     => $facet->options['display_more_link'] ? $facet->options['more_limit'] : $facet->options['limit'],
      'min_count' => $facet->options['min_count'],
      'missing'   => $facet->options['missing'],
    );
  }
  if ($fields) {
    $old = $query->setOption('search_api_facets', $fields);
    if ($old) { // This will only happen if other modules add facets of their own.
      $query->setOption('search_api_facets', $fields + $old);
    }
  }

  // Add active facet filters.
  $filter_array = search_api_facets_get_filters($query);
  foreach ($filter_array as $field => $filters) {
    foreach ($filters as $filter) {
      if ($filter == '!') {
        $query->condition($field, NULL);
      }
      elseif ($filter[0] == '"') {
        $filter = substr($filter, 1, -1);
        if (strlen($filter)) {
          $query->condition($field, $filter);
        }
      }
      else {
        $lowtype = $filter[0];
        $uptype = $filter[strlen($filter) - 1];
        $filter = substr($filter, 1, -1);
        list($lower, $upper) = explode(' ', $filter, 2);
        if ($lower == '*' && $upper == '*') {
          $query->condition($field, NULL, '<>');
        }
        else {
          if ($lower != '*') {
            $query->condition($field, $lower, $lowtype == '[' ? '>=' : '>');
          }
          if ($upper != '*') {
            $query->condition($field, $upper, $uptype == ']' ? '<=' : '<');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_search_api_index_update().
 */
function search_api_facets_search_api_index_update(SearchApiIndex $index) {
  $options = $index->options + array('fields' => array());
  $original_options = $index->original->options + array('fields' => array());
  if ($options['fields'] != $original_options['fields']) {
    $fields = $options['fields'];
    $facets = search_api_facet_load_multiple(FALSE, array('index_id' => $index->machine_name, 'enabled' => 1));
    foreach ($facets as $facet) {
      if (empty($fields[$facet->field]['indexed'])) {
        $facet->enabled = FALSE;
        $facet->save();
      }
      elseif (empty($facet->options['type']) || $facet->options['type'] != $fields[$facet->field]['type']) {
        _search_api_facets_refresh_type($facet, $facet->options);
        $facet->save();
      }
    }
  }
}

/**
 * Implements hook_search_api_index_delete().
 */
function search_api_facets_search_api_index_delete(SearchApiIndex $index) {
  db_delete('search_api_facet')
    ->condition('index_id', $index->machine_name)
    ->execute();
  if (search_api_facet_load_multiple(FALSE, array('index_id' => $index->machine_name), TRUE)) {
    drupal_set_message(t('A module defines default search facets for the deleted index. You should update the module code or disable it.'), 'warning');
  }
}

/**
 * Implements hook_search_api_facet_insert().
 */
function search_api_facets_search_api_facet_insert(SearchApiFacet $facet) {
  block_flush_caches();
  cache_clear_all('*', 'cache_block', TRUE);
}

/**
 * Implements hook_search_api_facet_update().
 */
function search_api_facets_search_api_facet_update(SearchApiFacet $facet) {
  if ($facet->enabled != $facet->original->enabled) {
    block_flush_caches();
    cache_clear_all('*', 'cache_block', TRUE);
  }
}

/**
 * Implements hook_search_api_facet_delete().
 */
function search_api_facets_search_api_facet_delete(SearchApiFacet $facet) {
  block_flush_caches();
  cache_clear_all('*', 'cache_block', TRUE);
}

/**
 * Implements hook_flush_caches().
 *
 * Refreshes type information for all enabled facets.
 */
function search_api_facets_flush_caches() {
  foreach (search_api_facet_load_multiple(FALSE, array('enabled' => 1)) as $facet) {
    if (empty($facet->options['type']) || $facet->options['type'] == 'options') {
      _search_api_facets_refresh_type($facet, $facet->options);
      $facet->save();
    }
  }
}

/**
 * Load a search facets.
 *
 * @param $id
 *   Either a facet's numeric ID or delta.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return SearchApiFacet
 *   Either the facet with the specified ID or delta, or FALSE, if no such facet
 *   exists.
 */
function search_api_facet_load($id, $reset = FALSE) {
  $ret = entity_load('search_api_facet', array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Load multiple facets at once, determined by IDs or deltas, or by other
 * conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of facet IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {search_api_facet} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of SearchApiFacet objects keyed by machine name.
 */
function search_api_facet_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load_multiple_by_name('search_api_facet', $ids, $conditions, $reset);
}

/**
 * Saves a facet.
 * If $facet->delta is empty, it will be computed automatically. In this case,
 * or if $facet->is_new is set, the facet will be inserted. Otherwise, it will
 * be updated.
 *
 * @param SearchApiFacet $facet
 *   The facet object to save.
 */
function search_api_facet_save(SearchApiFacet $facet) {
  $facet->save();
}

/**
 * Deletes facets according to a set of conditions.
 *
 * @param $conditions
 *   An array of conditions, analogous to search_api_facet_load_multiple().
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return
 *   TRUE, if any facets were successfully deleted, FALSE otherwise.
 */
function search_api_facet_delete_multiple(array $conditions = array(), $reset = FALSE) {
  $ids = array_keys(search_api_facet_load_multiple(FALSE, $conditions, $reset));
  if (!$ids) {
    return FALSE;
  }
  entity_delete_multiple('search_api_facet', $ids);
  return TRUE;
}

/**
 * Function for retrieving the active filters for a certain search.
 *
 * Filters are taken from URL parameters named "filter_ID", or just "filter"
 * when only one facetted search is active.
 *
 * @param SearchApiQueryInterface $query
 *   The query for which to create the filters.
 *
 * @return array
 *   An array with field names as keys, mapped to a filter value.
 */
function search_api_facets_get_filters(SearchApiQueryInterface $query) {
  $params = drupal_get_query_parameters();
  $search_id = $query->getOption('search id');

  if (isset($search_id) && isset($params['filter_' . $search_id])) {
    $filters = $params['filter_' . $search_id];
  }
  elseif (isset($params['filter'])) {
    $filters = $params['filter'];
  }
  return empty($filters) ? array() : $filters;
}

/**
 * Refresh the type information in the given options array.
 *
 * @param stdClass $facet
 *   The facet whose type information should be refreshed.
 * @param array $options
 *   An array for which 'type' and, if applicable, 'options' and 'entity_type'
 *   will be set.
 */
function _search_api_facets_refresh_type(SearchApiFacet $facet, array &$options) {
  unset($options['options'], $options['entity_type']);
  $index = search_api_index_load($facet->index_id);
  $field_info = $index->options['fields'][$facet->field];
  $type = $field_info['type'];
  if (isset($field_info['entity_type']) && entity_get_info($field_info['entity_type'])) {
    $options['entity_type'] = $field_info['entity_type'];
    return;
  }
  $options['type'] = search_api_extract_inner_type($type);
  $wrapper = $index->entityWrapper();
  foreach (explode(':', $facet->field) as $part) {
    if (!isset($wrapper->$part)) {
      $wrapper = NULL;
      return;
    }
    $wrapper = $wrapper->$part;
    $wrapper_info = $wrapper->info();
    $level = search_api_list_nesting_level($wrapper_info['type']);
    for ($i = 0; $i < $level; ++$i) {
      $wrapper = $wrapper[0];
    }
  }
  if ($wrapper->optionsList('view')) {
    $options['type'] = 'options';
    $options['options'] = $wrapper->optionsList('view');
  }
}

/**
 * Creates a human-readable name for a certain filter. $values is only needed if
 * $type is "options".
 */
function _search_api_create_filter_name($filter, $type, array $values = array()) {
  if ($filter == '!') {
    return t('none');
  }
  if ($filter[0] == '"') {
    $filter = substr($filter, 1, -1);
    if ($filter == '') {
      return t('any');
    }
    return _search_api_create_value_name($filter, $type, $values);
  }
  $lowtype = $filter[0];
  $uptype = $filter[strlen($filter) - 1];
  $filter = substr($filter, 1, -1);
  $filter = explode(' ', $filter, 2);
  if ($filter[0] == '*' && $filter[1] == '*') {
    return t('any');
  }
  if ($filter[0] == '*') {
    return ($uptype == ']' ? '< ' : 'â‰¤ ') . _search_api_create_value_name($filter[1], $type, $values);
  }
  if ($filter[1] == '*') {
    return ($lowtype == ']' ? '> ' : 'â‰¥ ') . _search_api_create_value_name($filter[0], $type, $values);
  }
  return _search_api_create_value_name($filter[0], $type, $values) . ' â€“ ' . _search_api_create_value_name($filter[1], $type, $values);
}

/**
 * Creates a human-readable name for a single filter value.
 */
function _search_api_create_value_name($value, $type, array $values = array()) {
  if (isset($values[$value])) {
    return $values[$value];
  }
  switch ($type) {
    case 'boolean':
      return $value ? t('true') : t('false');
    case 'date':
      // @todo Implement something really clever here. hook_date_types()?
      return format_date($value, 'short');
    case 'duration':
      return format_interval($value);

    default:
      // Nothing we can do about it.
      return $value;
  }
}

/**
 * Compares two object by their "iname" properties.
 */
function _search_api_facets_compare_iname(stdClass $term1, stdClass $term2) {
  return strcmp($term1->iname, $term2->iname);
}
