<?php

define('DEFAULT_advanced_search_result_view_type','list');
define('DEFAULT_advanced_search_result_list_size',10);
define('DEFAULT_advanced_search_result_table_size','3x4');
define('DEFAULT_advanced_search_field_set_type','all');
define('DEFAULT_advanced_search_selectable_fields', '(serialized)' . serialize(array()));
define('DEFAULT_advanced_search_all_fields', '(serialized)' . serialize(array()));
define('DEFAULT_advanced_search_saved_queries', '(serialized)' . serialize(array()));
define('DEFAULT_advanced_search_sort_fields', null);


/**
 * implements hook menu
 * @return menu items array
 */
function advanced_search_menu() {
	
  $items['advanced_search_1'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advanced_search_form_1'),
    'access arguments' => array('access content'),
    'title' => 'Advanced Search 1',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['advanced_search_2'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advanced_search_form_2'),
    'access arguments' => array('access content'),
    'title' => 'Advanced Search 2',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['advanced_search_3'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advanced_search_form_3'),
    'access arguments' => array('access content'),
    'title' => 'Advanced Search 3',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['advanced_search_4'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('advanced_search_form_4'),
      'access arguments' => array('access content'),
      'title' => 'Exact Search',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['advanced_search_view'] = array(
    'page callback' => 'advanced_search_view',
    'access arguments' => array('access content'),
    'title' => 'Advanced Search View',
    'type' => MENU_CALLBACK,
  );  
  $items['advanced_search_view/%'] = array(
    'page callback' => 'advanced_search_view',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'title' => 'Search View',
    'type' => MENU_CALLBACK,
  );
  $items['advanced_search_browse'] = array(
    'page callback' => 'advanced_search_browse',
    'access arguments' => array('access content'),
    'title' => 'Browse',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%/advanced_search_configuration'] = array(
    'title' => 'Advanced Search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advanced_search_settings_user_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'file' => 'advanced_search.admin.inc',
  );
  $items['admin/config/search/advanced_search_configuration'] = array(
    'title' => 'Advanced Search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advanced_search_settings_application_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'advanced_search.admin.inc',
  );
  $items['advanced_search_query_manage'] = array(
    'title' => 'Manage saved queries',
    'page callback' => 'advanced_search_query_manage',
    'access arguments' => array('access user specific'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['advanced_search_query_save/%'] = array(
    'page callback' => 'advanced_search_query_save',
    'page arguments' => array(1),
    'access arguments' => array('access user specific'),
    'type' => MENU_CALLBACK,
  );
  $items['advanced_search_query_delete/%'] = array(
    'page callback' => 'advanced_search_query_delete',
    'page arguments' => array(1),
    'access arguments' => array('access user specific'),
    'type' => MENU_CALLBACK,
  );

  return $items;		
}


function advanced_search_theme($existing, $type, $theme, $path) {

  return array(
    'advanced_search_result' => array(
      'variables' => array('result' => NULL, 'module' => NULL),
      'file' => 'advanced_search.pages.inc',
      'template' => 'advanced-search-result',
    ),
    'advanced_search_results' => array(
      'variables' => array('results' => NULL, 'module' => NULL),
      'file' => 'advanced_search.pages.inc',
      'template' => 'advanced-search-results',
    ),
  );
}


/**
 * advanced search 1 search form
 */
function advanced_search_form_1($form, &$form_state) {

  $form['with_all_words'] = array(
    '#type' => 'textfield',
    '#title' => t('with all words'),
  );
  $form['with_exact_phrase'] = array(
    '#type' => 'textfield',
    '#title' => t('with exact phrase'),
  );
  $form['with_any_word'] = array(
    '#type' => 'textfield',
    '#title' => t('with any word'),
  );
  $form['without_words'] = array(
    '#type' => 'textfield',
    '#title' => t('without words'),
  );
  $form['search_type'] = array(
    '#type' => 'radios',
    '#title' => t('search in:'),
    '#options' => array('all' => t('all fields'), 'selected' => t('only selected fields:')),
    '#default_value' => 'all',
  );
  $form['field_selection'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => advanced_search_get_selectable_metadata_fields(FALSE),
    '#attributes' => array ('onclick' => 'document.getElementById("edit-search-type-selected").checked = true;')
  );     
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'search',
  );      
  
  return $form;
}


/**
 * advanced search 1 search form validation
 */
function advanced_search_form_1_validate($form, &$form_state) {

  $query_types = array('with_all_words', 'with_exact_phrase', 'with_any_word', 'without_words');
  $something_entered = false;

  foreach ($query_types as $type) {
    if ($form[$type]['#value'] != '') $something_entered = true;
  }

  if (!$something_entered) {
    form_set_error('',t('please enter search terms'));
  }
}


/**
 * advanced search 1 search form submit handler
 */
function advanced_search_form_1_submit($form, &$form_state) {

  $query_types = array('with_all_words', 'with_exact_phrase', 'with_any_word', 'without_words');
  $regex = "/[\s,]+/";
  
  $query['exploded']['with_all_words']     = preg_split($regex, $form['with_all_words']['#value'],-1,PREG_SPLIT_NO_EMPTY);
  $query['exploded']['with_exact_phrase']  = $form['with_exact_phrase']['#value'] ? array('"' . $form['with_exact_phrase']['#value'] . '"') : array();
  $query['exploded']['with_any_word']      = preg_split($regex, $form['with_any_word']['#value'],-1,PREG_SPLIT_NO_EMPTY);
  $query['exploded']['without_words']      = preg_split($regex, $form['without_words']['#value'],-1,PREG_SPLIT_NO_EMPTY);

  // if searched in fields, attach field string
  $query['field_selected'] = $query['exploded'];
  if ($form['search_type']['#value'] != 'all') {
    foreach ($query_types as $type) {
      foreach ($query['exploded'][$type] as $key => $string) {
        $query['field_selected'][$type][$key] = '(';
        foreach ($form['field_selection']['#value'] as $field) {
            $query['field_selected'][$type][$key] .= ' ' . $field . ':' . $string;
        }
        $query['field_selected'][$type][$key] .= ')';
      }
    }
  }

  $query_string = '';
  if (isset($query['field_selected']['with_exact_phrase'][0])) $query_string .= '+' . $query['field_selected']['with_exact_phrase'][0];
  foreach ($query['field_selected']['with_all_words'] as $token) $query_string .= ' +' . $token;
  foreach ($query['field_selected']['without_words'] as $token)  $query_string .= ' -' . $token;
  foreach ($query['field_selected']['with_any_word'] as $token)  $query_string .= ' ' . $token;

  $form_state['redirect'] = 'advanced_search_view/' . $query_string; // $form['withAllWords']['#value'];
}


/**
 * advanced search 2 search form
 */
function advanced_search_form_2($form, &$form_state) {

  if (!isset($form_state['storage']['inputs'])) $form_state['storage']['inputs'] = array(0);

  $first_input = reset($form_state['storage']['inputs']);
  $input_count = sizeof($form_state['storage']['inputs']);

  // hidden input field, is used as default submit when the user presses Enter in an textfield
  $form['submit_hidden'] = array(
    '#type' => 'submit',
    '#attributes' => array('style' => 'visibility:hidden; height:0px; overflow:hidden; margin:0; padding:0;')
  );

  $form[] = array('#type' => 'hidden', '#prefix' => '<table>');

  foreach ($form_state['storage']['inputs'] as $i)
  {

    if ($i != $first_input) {
      $form['relation' . $i] = array(
        '#type' => 'select',
        '#options' => drupal_map_assoc(array('AND','OR','NOT')),
        '#prefix' => '<tr><td style="width:80px;">',
        '#suffix' => '</td>',
      );
    }
    else {
      $form[] = array('#type' => 'hidden', '#prefix' => '<tr><td style="width:80px;">', '#suffix' => '</td>');
    }
    $form['fieldSelection' . $i] = array(
      '#type' => 'select',
      '#options' => advanced_search_get_selectable_metadata_fields(TRUE),
      '#default_value' => 'all_fields',
      '#prefix' => '<td>',
      '#suffix' => '</td>',
    );
    $form['searchText' . $i] = array(
      '#type' => 'textfield',
      '#prefix' => '<td>',
      '#suffix' => '</td>',
    );
    if ($input_count > 1) {
      $form['delete' . $i] = array(
        '#name' => 'delete_' .$i,
        '#type' => 'button',
        '#value' => t('-'),
        '#submit' => array('advanced_search_form_2_delete_field'),
        '#executes_submit_callback' => TRUE,
        '#validate' => array(),
        '#prefix' => '<td style="width:50px;">',
        '#suffix' => '</td></tr>',
      );
    }
    else {
      $form[] = array('#type' => 'hidden', '#prefix' => '<td style="width:50px;">', '#suffix' => '</td></tr>');
    }
  }

  $form[] = array('#type' => 'hidden','#suffix' => '</table>');

  $form['addField'] = array(
    '#type' => 'button',
    '#value' => t('add field'),
    '#submit' => array('advanced_search_form_2_add_field'),
    '#executes_submit_callback' => TRUE,
    '#validate' => array(),
  );
  $form['reset'] = array(
    '#type' => 'button',
    '#value' => t('reset'),
    '#submit' => array('advanced_search_form_2_reset'),
    '#executes_submit_callback' => TRUE,
    '#validate' => array(),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('search'),
  );

  return $form;
}


/**
 * advanced search 2 search form submit validation
 */
function advanced_search_form_2_validate($form, &$form_state) {

  $something_entered = false;
  $values = $form_state['values'];

  foreach ($form_state['storage']['inputs'] as $i) {
    if ($values['searchText' . $i] != '') $something_entered = true;
  }

  if (!$something_entered) {
    form_set_error('searchText' . reset($form_state['storage']['inputs']), t('please enter search terms'));
  }
}


/**
 * advanced search 2 search form submit handler
 */
function advanced_search_form_2_submit($form, &$form_state) {

  $query_string = '';

  $values = $form_state['values'];
  $first_input = reset($form_state['storage']['inputs']);

  foreach ($form_state['storage']['inputs'] as $i) {
    if ($values['searchText' . $i] == '') continue;
    // specify relation if needed
    if ($i != $first_input) {
      $query_string .= ' ' . $values['relation' . $i] . ' ';
    }
    // specify field if needed
    if ($values['fieldSelection' . $i] != 'all_fields') {
      $query_string .= $values['fieldSelection' . $i] . ':';
    }
    // specify search text
    $query_string .= $values['searchText' . $i];
  }

  $form_state['redirect'] = 'advanced_search_view/' . $query_string;
}


/**
 * advanced search 2 - add a field
 */
function advanced_search_form_2_add_field($form, &$form_state) {

  $form_state['storage']['inputs'][] = max($form_state['storage']['inputs']) + 1;
  $form_state['rebuild'] = TRUE;
}


/**
 * advanced search 2 - delete a field
 */
function advanced_search_form_2_delete_field($form, &$form_state) {

  $token = explode('_', $form_state['clicked_button']['#name']);
  $number = $token[1];

  unset($form_state['storage']['inputs'][$number]);
  $form_state['rebuild'] = TRUE;
}


/**
 * advanced search 2 - reset search form
 */
function advanced_search_form_2_reset($form, &$form_state) {

  $form_state['rebuild'] = FALSE;
}


/**
 * advanced search 3 search form
 */
function advanced_search_form_3($form, &$form_state) {

  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => t('enter query string:'),
    '#maxlength'=> 1024,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'search',
  );
  $form['caption'] = array(
    '#type' => 'markup',
    '#markup' => 
      t('<p>search with these code words:</p>
      <p>logic operators:
        <ul>
          <li><em>word</em> AND <em>word</em>: documents containing both words</li>
          <li><em>word</em> OR <em>word</em>: documents containing one of the words</li>
          <li>NOT <em>word</em>: documents not containing this word</li>
        </ul>
      </p>
      <p>specify field to search in:</p>
      <ul><li><em>fieldname</em>:<em>word</em></li></ul>
      <p>search for exact phrase via:</p>
      <ul><li>"<em>phrase</em>"</li></ul>
      <p>search for words only with parts via:</p>
      <ul><li><em>part-of-word</em>*</li></ul>
      <p>serach for ranges via:</p>
      <ul><li>[<em>start</em> TO <em>end</em>]</li></ul>'),
  );
  
  return $form;
}


/**
 * advanced search 3 search form validation
 */
function advanced_search_form_3_validate($form, &$form_state) {

  if ($form['query']['#value'] == '') form_set_error('query',t('please enter search terms'));
}


/**
 * advanced search 3 search form submit handler
 */
function advanced_search_form_3_submit($form, &$form_state) {

  $query_string = $form_state['values']['query'];
  $form_state['redirect'] = 'advanced_search_view/' . $query_string;
}

/**
* advanced search 4 search form
*/
function advanced_search_form_4($form, &$form_state) {

 $form['query'] = array(
    '#type' => 'textfield',
    '#title' => t('enter query string:'),
    '#maxlength'=> 1024,
 );
 $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'search',
 );
 $form['caption'] = array(
    '#type' => 'markup',
    '#markup' => 
 t('<p>Exact search for the phrase entered.</p>'),
 );

 return $form;
}


/**
 * advanced search 4 search form validation
 */
function advanced_search_form_4_validate($form, &$form_state) {

 if ($form['query']['#value'] == '') form_set_error('query',t('please enter search terms'));
}


/**
 * advanced search 4 search form submit handler
 */
function advanced_search_form_4_submit($form, &$form_state) {

 $query_string = $form_state['values']['query'];
 $form_state['redirect'] = 'advanced_search_view/' . 'all_exact:"' . $query_string . '"';
}


/**
 * function for viewing (and retrieving) search results
 * @param <type> $query_string - solr query
 * @return build-render array with search results, gets rendered by drupal
 */
function advanced_search_view($dummy) {  
  $query_string = implode('/', func_get_args());
  if(trim($query_string) == '*') $query_string = '*:*';
  advanced_search_searching($query_string);

  switch (metadata_variable_get_session('advanced_search_result_view_type')) {
    case 'list':
      $rows = metadata_variable_get_session('advanced_search_result_list_size');
      break;
    case 'table':
      $table_size_data = advanced_search_get_table_size_data();
      $rows = $table_size_data['count'];
      break;
    default:
      die('result-set size not set');
  }

  $solr = apachesolr_get_solr(variable_get('metadata_core'));

  try {
    $opts =  array(
      'rows' => $rows,
      'start' => pager_find_page() * $rows,
      'hl.fl' => '*',
    );
    $prevsort = "";
    if(isset($_SESSION) && array_key_exists('advanced_search_sort_prev', $_SESSION) && $_SESSION['advanced_search_sort_prev'][0] != '') {
      switch($_SESSION['advanced_search_sort_prev'][1]) {
      case 1:
        $prevsort = ", " . $_SESSION['advanced_search_sort_prev'][0] . " asc";
        break;
      case -1:
        $prevsort = ", " . $_SESSION['advanced_search_sort_prev'][0] . " desc";
        break;
      }
    }
    if(isset($_SESSION) && array_key_exists('advanced_search_sort', $_SESSION) && $_SESSION['advanced_search_sort'][0] != '') {
      switch($_SESSION['advanced_search_sort'][1]) {
      case 1:
        $opts['sort'] = $_SESSION['advanced_search_sort'][0] . " asc" . $prevsort;
        break;
      case -1:
        $opts['sort'] = $_SESSION['advanced_search_sort'][0] . " desc" . $prevsort;
        break;
      }
    }
    # replacing date ranges
    $query_string = preg_replace('/(\d\d\d\d)\s*-\s*(\d\d\d\d)/', '[$1 TO $2]', $query_string);

    $response = $solr->search($query_string, $opts);
    $results = advanced_search_process_response($response,$rows);
  } catch(Exception $ex) {
    $qs = preg_replace("/{.*}/", "", $query_string);
    $apacheMsg = $ex->getMessage();
    $apacheMsg = preg_replace(
        "/.*org.apache.lucene.queryParser.ParseException:([^\t]*).*/",
        "\\1", strtr($apacheMsg, "\r\n", "\t\t"));
    drupal_set_message(t("Your search '<em>$qs</em>' could not be executed.")
        ."\n<br/>$apacheMsg".date('c'),"error");
    $results = array();
    advanced_search_searching('');
  }
  
  $search_result_container = array(
    '#theme' => 'advanced_search_results',
    '#results' => $results,
    '#module' => 'advanced_search',
  );
  
  $build['machtes_for']['#markup'] = advanced_search_panel_matches_for($query_string);  
  $build['sort_results'] = drupal_get_form( 'advanced_search_panel_sort_results', $query_string);  
  $build['num_results']['#markup'] = count($results) == 0? 0 : advanced_search_panel_num_results($response);
  $build['panel'] = drupal_get_form('advanced_search_panel_form',$query_string);
  $build['search_results'] = $search_result_container;

  return $build;
}


function advanced_search_panel_matches_for($query_string) {
  $html = "<div class=\"results-matches_for-label\">Matches for:</div> ";
  return $html = "<div class=\"results-matches_for\">".
                 $html."<div class=\"results-matches_for-searchterms\">".$query_string."</div>"
                 ."</div>";
}


function advanced_search_init_sort_fields() {
  require_once(dirname(__FILE__)."/../metadata/metadata_config_tools.inc");
  $data = metadata_read_ods_table(dirname(__FILE__)
      ."/../additional/schema.ods", 1, 3);
      
  $sort_fields = array();
  foreach($data as $fi) {
    if($fi["Sort"] == 1) {
      $sort_fields[$fi["Field"] . '__sort'] = array("Label" => $fi["Label"]);
    }
  }
  return $sort_fields;
}


function advanced_search_panel_sort_results($form, &$form_state, $query_string) {
  $sort_fields = metadata_variable_get_session('advanced_search_sort_fields');
  if($sort_fields === null) {
    $sort_fields = advanced_search_init_sort_fields();
  }
  $form['panel'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
  ));
  $form['panel']['caption'] = array (
    '#markup' => "Sorted by:",
  );
  
  foreach($sort_fields as $fld => $info) {
    $form['panel'][$fld] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('sort-button-panel'),
    ));
    $form['panel'][$fld]["button"] = array (
      '#type' => 'button',
      '#value' => t($info['Label']),
      '#submit' => array('advanced_search_sort'),
      '#executes_submit_callback' => TRUE,
      '#id' => "advanced_search_sort_btn_$fld",
    );
    $order = "";
    if(isset($_SESSION) && array_key_exists('advanced_search_sort', $_SESSION) && $_SESSION['advanced_search_sort'][0] == $fld) {
      switch($_SESSION['advanced_search_sort'][1]) {
      case 1:
        $order = "↑";
        break;
      case -1:
        $order = "↓";
        break;
      }
    }

    $form['panel'][$fld]["mark"] = array (
      '#markup' => $order,
    );
  }

  return $form;
}


function advanced_search_panel_num_results($response) {
  $html = "<div class=\"results-num_results-label\">Number of results:</div>";
  $html .= "<div class=\"results-num_results-count\">" . $response->response->numFound . "</div>";
  return $html;
}


/**
 * function for processins solr result and generating renderable array
 * copied and modified from apachesolr_search_process_response (version 7.x-1.0-BETA5) !!!!
 *
 * this is currently a bit of a mess, a rework should be considered
 *
 * @param <type> $response - response from solr-query
 * @return result set with snippets
 */
function advanced_search_process_response($response,$display_count) {

  $results = array();
  $hl_fl = array('label','dc_title'); // TODO: change this
  $total = $response->response->numFound;
  pager_default_initialize($total, $display_count);
  
  if ($total > 0) {
    foreach ($response->response->docs as $doc) {
      
      //TODO: this is hardcoded hack, because this data is missing in solr core2 response
      $doc->bundle = 'bhle';
      $doc->is_uid = 0;
      $doc->path = 'node/' . $doc->entity_id;

      $extra = array();

      // Start with an empty snippets array.
      $snippets = array();
    
      // Find the nicest available snippet.
      foreach ($hl_fl as $hl_param) {
        if (isset($response->highlighting->{$doc->id}->$hl_param)) {
          // Merge arrays preserving keys.
          foreach ($response->highlighting->{$doc->id}->$hl_param as $values) {
            $snippets[$hl_param] = $values;
          }
        }
      }
      // If there's no snippet at this point, add the teaser.
      if (!$snippets) {
        if (isset($doc->teaser)) {
          $snippets[] = truncate_utf8($doc->teaser, 256, TRUE);
        }
      }      

      $highlighting = array();
      
      if (isset($response->highlighting->{$doc->id})) {
        $hl_fields = (array) $response->highlighting->{$doc->id};

        foreach ($hl_fields as $hl_key => $hl_value) {
          $highlighting[$hl_key] = $hl_value;
        }
      }       

      $snippet = theme('apachesolr_search_snippets__' . $doc->entity_type . '__' . $doc->bundle, array('doc' => $doc, 'snippets' => $snippets));

      if (!isset($doc->content)) {
        $doc->content = $snippet;
      }

      // Normalize common dates so that we can use Drupal's normal date and
      // time handling.
      if (isset($doc->ds_created)) {
        $doc->created = strtotime($doc->ds_created);
      }
      if (isset($doc->ds_changed)) {
        $doc->changed = strtotime($doc->ds_changed);
      }
      if (isset($doc->tos_name)) {
        $doc->name = $doc->tos_name;
      }

      $extra = array();

      // Allow modules to alter each document and its extra information.
      drupal_alter('apachesolr_search_result', $doc, $extra);

      //merge "fields" and "snippets" to a new array called $fields_and_highlighting
      $fields_and_highlighting = (array) $doc;   // TODO: copy?
      foreach ($highlighting as $key_entry => $entry) {
        foreach($entry as $key_sub_entry => $sub_entry) {
          $fields_and_highlighting[$key_entry][$key_sub_entry] = $sub_entry;
          //echo 'hl: $key_entry' . $key_entry . '   $sub_entry' . $sub_entry;
        }
      }     
      
      $doc->label = $doc->label[0];   // TODO: wrong solr response?

      $fields = (array) $doc;

      $result = array(
        // link is a required field, so handle it centrally.
        'link' => url($doc->path, array('absolute' => TRUE)),
        // template_preprocess_search_result() runs check_plain() on the title
        // again.  Decode to correct the display.
        'title' => htmlspecialchars_decode($doc->label, ENT_QUOTES),
        // These values are not required by the search module but are provided
        // to give entity callbacks and themers more flexibility.
        //'score' => $doc->score,      TODO: does not work - why?
        'snippets' => $snippets,
        'snippet' => $snippet,
        'fields' => $fields,
        'entity_type' => $doc->entity_type,
        'bundle' => $doc->bundle,
        'highlighting' => $highlighting,
        'fields_and_highlighting' => $fields_and_highlighting,
      );

      // Call entity-type-specific callbacks for extra handling.
      $function = apachesolr_entity_get_callback($doc->entity_type, 'result callback');
      if (function_exists($function)) {
        $function($doc, $result, $extra);
      }

      $result['extra'] = $extra;

      $results[] = $result;
    }

    // TODO: following better with module_invoke_all? (is copied from apachesolr_search_process_response)
    // Hook to allow modifications of the retrieved results
    foreach (module_implements('apachesolr_process_results') as $module) {
      $function = $module . '_apachesolr_process_results';
      $function($results);
    }
  }
  return $results;
}


/**
 * <code>
 * advanced_search_extract_hl_terms(array(
 *   'dc_title' => "My <strong>special</strong> Title",
 *   'dc_creator' => array("Hans <strong>Franz</strong>", "Hinz Kunz")
 *   ));
 * </code>
 * @param array $hifield a map index_field_name => array(values)
 * @return array index_field_name => array(terms)
 */
function advanced_search_extract_hl_terms($hifield) {
  $ret = array();
  foreach($hifield as $idxfld_name => $values) {
    if(!is_array($values)) $values = array($values);
    foreach($values as $val) {
      // cut everything between <strong>
      $rawterms = explode('</strong>', $val);
      array_pop($rawterms);
      $terms = array();
      foreach($rawterms as $rawterm) {
        $terms[] = substr($rawterm, strrpos($rawterm, '>') + 1);
      }
      $ret[$idxfld_name] = $terms;
    }
  }
  return $ret;
}

function _advanced_search_sort_len_cmp($a, $b) {
  if(strlen($a) == strlen($b)) {
    return 0;
  }
  return (strlen($a) < strlen($b))? -1 : 1;
}

function _advanced_search_hl_mark($node, $term) {
  //$children = $node->childNodes;
  for($c = $node->firstChild; $c != null; $c = $next) {
    $next = $c->nextSibling;
    if($c->nodeType == XML_ELEMENT_NODE) {
      //_advanced_search_hl_mark($c, $term);
    } elseif($c->nodeType == XML_TEXT_NODE) {
      $parts = explode($term, $c->nodeValue);
      $last = array_pop($parts);
      foreach($parts as $part) {
        $node->insertBefore($c->ownerDocument->createTextNode($part), $c);
        $strong = $c->ownerDocument->createElementNs("http://www.w3.org/1999/xhtml","strong");
        $strong->appendChild($c->ownerDocument->createTextNode($term));
        $node->insertBefore($strong, $c);
      }
      $node->insertBefore($c->ownerDocument->createTextNode($last), $c);
      $node->removeChild($c);
    }
  }
}

/** Replace text with highlighting markings in data XML.
 *
 * 
 * <code>
 * $terms = advanced_search_extract_hl_terms(...);
 * advanced_search_hightlight_node($terms, $dom);
 * </code>
 * @param array $idxterms a map index_field_name => array(terms)
 * @param DOMDocument $node  The metadata drupal node body.
 */
function advanced_search_hightlight_node($idxterms, $node) {
  $xp = new DOMXPath($node);
  $schema = metadata_schema_data();
  $paths = array();
  foreach($schema as $schema_fld) {
    if($schema_fld['Namespaces'] != "") {
      list($alias, $url) = explode("=", $schema_fld['Namespaces']);
      $xp->registerNamespace($alias, $url);
    }
  }
  foreach($schema as $schema_fld) {
    $paths[$schema_fld["Field"]] = $schema_fld["Field-XPath"];
  }
  
  foreach($idxterms as $idxfld_name => $terms) {
    if(substr($idxfld_name, -7) == "__facet") $idxfld_name = substr($idxfld_name, 0, -7);
    usort($terms, "_advanced_search_sort_len_cmp");
    if(!isset($paths[$idxfld_name])) continue;
    $path = $paths[$idxfld_name];
    $fld_nodes = $xp->query($path, $node->documentElement);
    foreach($fld_nodes as $fld_node) {      
      //$span = $node->createElement("span");
      $span = $node->createElementNs("http://www.w3.org/1999/xhtml","span");
      $span->appendChild($node->createTextNode($fld_node->textContent));
      foreach ($fld_node->childNodes as $c) $fld_node->removeChild($c);
      $fld_node->appendChild($span);
      foreach($terms as $term) {
        _advanced_search_hl_mark($span, $term);
      }
    }
  }
}


/**
 * returns size of table for the result-table-view for the current user
 * @return <type> - x,y size, count of results
 */
function advanced_search_get_table_size_data() {

  $string = metadata_variable_get_session('advanced_search_result_table_size');
  $values = explode('x',$string);
  
  $return['size']['x'] = $values[1];
  $return['size']['y'] = $values[0];
  $return['count'] = $values[1] * $values[0];

  return $return;
}


/**
 * gets the currently selected metadata fields
 * @param bool $all_selector - appends the 'all fields' selector
 * @return metadata fields
 */
function advanced_search_get_selectable_metadata_fields($all_selector = false) {

  if (metadata_variable_get_user('advanced_search_field_set_type') == 'all') {
    $fields = advanced_search_get_all_metadata_fields();
  }
  else {
    $fields = array();
    foreach(metadata_variable_get_user('advanced_search_selectable_fields') as $field) {
      if ($field != '0') $fields[$field] = $field;
    }
  }

  if ($all_selector) $fields = array_merge(array('all_fields' => t('all fields')),$fields);

  return $fields;
}


/**
 * gets metadata fields
 * from variable 'advanced_search_all_fields'
 * from advanced_search_get_and_set_fields_from_solr_schema() otherwise
 * @return fields
 */
function advanced_search_get_all_metadata_fields() {

  $metadata_from_variable = metadata_variable_get_application('advanced_search_all_fields');

  if (isset($metadata_from_variable)) return $metadata_from_variable;
  //TODO get only application-specific fields from application config
  else return advanced_search_get_and_set_fields_from_solr_schema();
}


/**
 * extracts all metadata fields from solr's schema.xml
 * and saves it in the 'advanced_search_all_fields' variable
 * @return metadata fields
 */
function advanced_search_get_and_set_fields_from_solr_schema() {

  $solr = apachesolr_get_solr(variable_get('metadata_core'));
  $solr_schema_path = $solr->getUrl();
  if(substr($solr_schema_path, -1) != "/") $solr_schema_path .= "/";
  $solr_schema_path .= "admin/file/?file=schema.xml";
  
  $dom = new DOMDocument();
  $dom->load($solr_schema_path);
  $xpath = new DOMXpath($dom);

  $field_names = array();

  foreach ($xpath->query('/schema/fields/field/@name') as $field_name) {
    $fn = $field_name->textContent;
    if(substr($fn, -7) != "__facet" && substr($fn, -6) != "__sort" && substr($fn, -7) != "__exact"
         && $fn != "id" && $fn != "entity_id" && $fn != "entity_type"
         && $fn != "label" && $fn != "all") {
      $field_names[] = $fn;
    }
  }
  
  //TODO set only application-specific fields from application config
  $fields = drupal_map_assoc($field_names);
  metadata_variable_set_application('advanced_search_all_fields', $fields);

  return $fields;
}


/**
 * browsing page
 * @return page-html
 */
function advanced_search_browse() {

  $html = 'Browse by Title ';
  foreach (range('A','Z') as $letter) {
    $url = '?q=advanced_search_view/' .
      'dc_title__facet:(' . $letter . '* ' .
      ' OR ' . strtolower($letter) . '*)';
    $html .= '<a href="' . $url . '">' . $letter . '</a> ';
  }
  $html .= '<br/>';

  $html .= 'Browse by Author ';
  foreach (range('A','Z') as $letter) {
    $url = '?q=advanced_search_view/' .
      'dc_creator__facet:(' . $letter . '* ' .
      ' OR ' . strtolower($letter) . '*)';
    $html .= '<a href="' . $url . '">' . $letter . '</a> ';
  }
  $html .= '<br/>';

  $html .= 'Browse by Year ';
  foreach (range(1850,2011,20) as $number) {
    $temp_number = $number;
    $url = '?q=advanced_search_view/' .
      'dc_date__facet:[' . $temp_number . ' TO ' . ($temp_number+20) . ']';
    $html .= '<a href="' . $url . '">' . $temp_number . '</a> ';
  }
  $html .= '<br/>';

  return $html;

}


/**
 * deletes query (from user data)
 * @param <type> $key
 * @return <type>
 */
function advanced_search_query_delete($key) {

  $saved_queries = metadata_variable_get_user('advanced_search_saved_queries');
  unset($saved_queries[$key]);
  metadata_variable_set_user('advanced_search_saved_queries',$saved_queries);

  drupal_goto('advanced_search_query_manage');
}


/**
 * page for managing queries
 * @return page-html
 */
function advanced_search_query_manage() {

  //TODO use theme
  $saved_queries = metadata_variable_get_user('advanced_search_saved_queries');

  if(count($saved_queries) > 0) {
    $html = '<table>';
    $html .= '<tr><th>query</th><th>delete</th></tr>';
    foreach ($saved_queries as $key => $query_string) {
      $explode  = (explode('}', $query_string));
      $display  = end($explode);
      $link     = '<a href="' . '?q=advanced_search_view/' . htmlspecialchars($query_string) . '">' . $display . '</a>';
      $delete   = '<a href="?q=advanced_search_query_delete/' . $key . '">delete</a>';
      $html    .= '<tr><td>' . $link . '</td><td>' . $delete . '</td></tr>';
    }
  } else {
    $html = "<tr><td colspan='2'><em>" . t("No saved queries yet") ."</em></td></tr>";
  }  

  $html .= '</table>';

  return $html;
}


/**
 * generates the panel form for the search result view
 */
function advanced_search_panel_form($form, &$form_state, $query_string) {

  $query_saved = isset ($form_state['storage']['query_saved']);


  $form['panel'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
  ));
  $form['panel']['button_save_query'] = array (
    '#type' => 'button',
    '#value' => $query_saved ? t('query saved') : t('save query'),
    '#submit' => array('advanced_search_panel_save_query'),
    '#executes_submit_callback' => TRUE,
    '#disabled' => $query_saved,
    '#access' => user_access('access user specific'),
  );
  $form['panel']['query_string'] = array (
    '#type' => 'hidden',
    '#value' => $query_string, 
  );
  $form['panel']['button_list'] = array (
    '#type' => 'button',
    '#value' => t('list'),
    '#submit' => array('advanced_search_panel_list'),
    '#executes_submit_callback' => TRUE,
  );
  $form['panel']['button_table'] = array (
    '#type' => 'button',
    '#value' => t('table'),
    '#submit' => array('advanced_search_panel_table'),
    '#executes_submit_callback' => TRUE,
  );
  switch (metadata_variable_get_session('advanced_search_result_view_type')) {
    case 'list':
      $form['panel']['list_size'] = array(
        '#type' => 'select',
        '#options' => drupal_map_assoc(array(5,10,15,20,30,50,100)), // TODO load from anywhere
        '#default_value' => metadata_variable_get_session('advanced_search_result_list_size'),
        // following does not work, because 'select'-form element has no '#submit' attribute, 
        // and therefore does not get registered for submit handling
        //'#submit' => array('advanced_search_panel_list_size'),
        //'#executes_submit_callback' => TRUE,
        //'#attributes' => array('onchange' => 'document.getElementById(\'advanced-search-panel-form\').submit();'),
      );
      break;
    case 'table':
      $form['panel']['table_size'] = array(
        '#type' => 'select',
        '#options' => drupal_map_assoc(array('2x3','3x4','4x5')), // TODO load from anywhere
        '#default_value' => metadata_variable_get_session('advanced_search_result_table_size'),
      );
      break;
  }
  $form['panel']['update'] = array (
    '#type' => 'button',
    '#value' => t('update'),
    '#submit' => array('advanced_search_panel_update'),
    '#executes_submit_callback' => TRUE,
  );
  
  return $form;
}

function advanced_search_panel_save_query($form, &$form_state) {

  $saved_queries = metadata_variable_get_user('advanced_search_saved_queries');
  $saved_queries[] = $form_state['values']['query_string'];
  metadata_variable_set_user('advanced_search_saved_queries',$saved_queries);

  $form_state['storage']['query_saved'] = true;
  $form_state['rebuild'] = TRUE;
}

function advanced_search_panel_update($form, &$form_state) {

  switch (metadata_variable_get_session('advanced_search_result_view_type')) {
    case 'list':      
      $_SESSION['advanced_search_result_list_size'] = $form_state['values']['list_size'];
      break;
    case 'table':      
      $_SESSION['advanced_search_result_table_size'] = $form_state['values']['table_size'];
      break;
  }
}


/**
 * switches to result-set list view
 */
function advanced_search_panel_list($form, &$form_state) {

  $_SESSION['advanced_search_result_view_type'] = 'list';
}


/**
 * switches to result-set table view
 */
function advanced_search_panel_table($form, &$form_state) {

  $_SESSION['advanced_search_result_view_type'] = 'table';
}


function advanced_search_sort($form, &$form_state) {

  $prev = array_key_exists('advanced_search_sort', $_SESSION)? 
    $_SESSION['advanced_search_sort'] : array('', 0);
  $fld = substr($form_state['clicked_button']['#id'], strlen("advanced_search_sort_btn_"));
  if($prev[0] == $fld) {
    if($_SESSION['advanced_search_sort'][1] == 1) {
      $_SESSION['advanced_search_sort'][1] = -1;
    } else {
      $_SESSION['advanced_search_sort'][1] = 1;
    }
  } else {
    $_SESSION['advanced_search_sort'] = array($fld, 1);
    $_SESSION['advanced_search_sort_prev'] = $prev;
  }
}

// ========== blocks

/**
 * Implements hook_block_info().
 */
function advanced_search_block_info() {
  // Get all of the moreLikeThis blocks that the user has created
  //$blocks = apachesolr_mlt_list_blocks();
  // Add the sort block.
  $blocks['facet_browser'] = array(
    'info' => t('Advanced Search: Facet Browser'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['metadata_simple_search'] = array(
    'info' => t('Metadata Simple Search'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/** Set or get the current search term.
 * 
 */
function advanced_search_searching($set = null) {
  static $v = null;
  if($set !== null) $v = $set;
  return $v;
}

/** 
 * Set or get the is_exact_search flag
 */
function advanced_search_is_exact_search($set = null) {
 static $is_exact_search = false;
 if($set !== null) $is_exact_search = $set;
 return $is_exact_search;
}


//TODO function advanced_search_facet_view() {
//}

/**
 * Implements hook_block_view().
 */
function advanced_search_block_view($block = '') {
  switch($block) {
  case 'facet_browser':
    if(advanced_search_searching()) {
      $solr = apachesolr_get_solr(variable_get('metadata_core'));
      $facet_fields =  variable_get('advanced_search_facet_fields', null);
      if($facet_fields == null || array_key_exists(0, $facet_fields)) {
          advanced_search_init_facet_fields();
          $facet_fields = variable_get('advanced_search_facet_fields', array());
      //if(count($facet_fields)==0) $facet_fields[] = 'dc_creator__facet';
      }
      $facet_term_limit =  variable_get('advanced_search_facet_term_limit', 5);
      $facet_freq_mincount =  variable_get('advanced_search_facet_freq_mincount', 1);
      $response = $solr->search(advanced_search_searching(), array(
            'facet' => 'true',
            'facet.limit' => $facet_term_limit,
            'facet.mincount' => $facet_freq_mincount,
            'facet.field' => array_keys($facet_fields),
//           'rows' => $rows,
//           'start' => pager_find_page() * $rows,
        ));
      if(!isset($response->facet_counts->facet_fields)) return null;
      $content =  "T=<pre>".htmlspecialchars(var_export(get_object_vars($response->facet_counts->facet_fields), true))."</pre>";
      $content = "";
      foreach(get_object_vars($response->facet_counts->facet_fields) as $facet => $dataObj) {
        $data = get_object_vars($dataObj);
        if(count($data) > 0) {
          $facet_title = $facet_fields[$facet]["Label"];
	  $content .= "<div class='facet $facet_title'>";
          $content .= "<h1>".t($facet_title)."</h1>\n<ol>";
          foreach($data as $term => $freq) {
            if($freq > 0) {
              $escterm = addcslashes($term , '"');
              $href = '?q=advanced_search_view/' . urlencode(
                "(" . advanced_search_searching() . ") AND $facet:\"$escterm\"");
              $content .= "<li class='occurrence'><a href='$href'>$term</a> ($freq)</li>";
            }
          }
           $content .= "</ol>\n</div>";
        }
      }
      // TODO use theme engine to style facet boxes.
      return array(
      'subject' => t('Facets'),
  //      'content' => theme('facet_view', 
  //        array('items' => "xxx"))
      'content' => $content,
      );
    }
    break;
  case 'metadata_simple_search':

    return array(
      'subject' => t(''),
      'content' => drupal_get_form('advanced_search_block_form_simple'),
      );
  default:
    // Error
  }
}

function advanced_search_block_form_simple($form, &$form_state) {
  $form['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => '',
    '#attributes' => array('title' => t('Enter the terms you wish to search for.')),
  );
  $def = isset($_SESSION['simple_search_field'])? $_SESSION['simple_search_field']
    : array('dc_creator', 'dc_title', 'dc_date', 'olef_journal_title');
  $form['simple_search_field'] = array(
    '#type' => 'checkboxes',
    '#default_value' => $def,
    '#options' => array(
      'dc_creator' => t('author'),
      'dc_title' => t('titles'),
      'dc_date' => t('year'),
      'olef_journal_title' => t('journal title'),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(),
    '#value' => t('Search'),
  );
  return $form;
}

function advanced_search_block_form_simple_submit($form, &$form_state) {
  $query = $form_state['values']['query'];
  $fields = $form_state['values']['simple_search_field'];
  $_SESSION['simple_search_field'] = $fields;
  $qparts = array();
  foreach($fields as $field) {
    if($query == "") $query = "*";
    if($field) $qparts[] = "$field:$query";
  }
  $q = empty($qparts)? $query :  implode(' OR ', $qparts);
  $form_state['redirect'] = "advanced_search_view/$q";
}

function advanced_search_init_facet_fields() {
  require_once(dirname(__FILE__)."/../metadata/metadata_config_tools.inc");
  $data = metadata_read_ods_table(dirname(__FILE__)
      ."/../additional/schema.ods", 1, 3);
      
  $facet_fields = array();
  foreach($data as $fi) {
    if($fi["Facet"] == 'D') {
      $facet_fields[$fi["Field"] . '__facet'] = array("Label" => $fi["Label"]);
    }
  }
  variable_set('advanced_search_facet_fields', $facet_fields);
}

/**
 * Implements hook_block_configure().
 */
function advanced_search_block_configure($block = '') {
  switch($block) {
  case 'facet_browser':
    return;
  default:
    
  }
}

/**
 * Implements hook_block_save().
 */
function advanced_search_block_save($block = '', $edit = array()) {
  switch($block) {
  case 'facet_browser':
    return;
  default:
    
  }
}


// ========== END blocks
