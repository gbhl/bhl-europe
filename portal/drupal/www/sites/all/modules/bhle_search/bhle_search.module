<?php
/**
Copyright (c) 2011, Museum of Natural History Vienna
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Museum of Natural History Vienna nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Museum of Natural History Vienna BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Initialize the session array (if necessary)
if (!isset($_SESSION['bhle_search']) || !isset($_SESSION['bhle_search']['conditions'])) {
    $_SESSION['bhle_search'] = array(
        'conditions' => array(),
        'expand_search' => 0,
        'exact_phrase' => 0,
    );
}

// Pre-defined variables (note: defaults are based on Solr's default schema)
define( 'BHLE_SEARCH_TITLE_FIELD', 'name' );
define( 'BHLE_SEARCH_AUTHOR_FIELD', 'author' );
define( 'BHLE_SEARCH_YEAR_FIELD', 'last_modified' );
define( 'BHLE_SEARCH_SCIENTIFIC_NAME_FIELD', 'keywords' );
define( 'BHLE_SEARCH_FIELDS', 'description;comments' );

/**
 * Implements hook_search_info()
 */
function bhle_search_search_info() {
    return array(
        'title' => 'bhle',
        'path' => 'bhle',
        'conditions_callback' => 'bhle_search_conditions',
    );
}

/**
 * Implements hook_FORMID_form_alter()
 * (aka Simple Search)
 */
function bhle_search_form_search_block_form_alter(&$form, $form_state) {
    $conditions = $_SESSION['bhle_search']['conditions'];

    // add a label (required for layout)
    $form['search_description'] = array(
        '#type' => 'markup',
        '#markup' => '<label>' . t('search in') . '</label>',
        '#weight' => -11,
    );

    $form['title'] = array(
        '#type' => 'checkbox',
        '#title' => t('Title'),
        '#default_value' => 1,
        '#weight' => -10,
    );

    $form['author'] = array(
        '#type' => 'checkbox',
        '#title' => t('Author'),
        '#default_value' => 1,
        '#weight' => -9,
    );

    $form['year'] = array(
        '#type' => 'checkbox',
        '#title' => t('Year'),
        '#default_value' => 1,
        '#weight' => -8,
    );

    $form['scientific_name'] = array(
        '#type' => 'checkbox',
        '#title' => t('Scientific Name'),
        '#default_value' => 0,
        '#weight' => -7,
    );

    $form['#validate'][] = 'bhle_search_simple_validate';

    // add autocomplete functionality
    if(module_exists("apachesolr_autocomplete")){
    	$element = &$form['basic']['keys'];
    	apachesolr_autocomplete_do_alter($element);
    	// add style sheet to fix issues with autocomplete field
    	drupal_add_css( drupal_get_path('module', 'bhle_search') . '/bhle_search.css');
    }

    return $form;
}

/**
 */
function bhle_search_add_condition(&$form, $id, $total_count, $term = '', $field = '', $operator = '' ) {
    // Pre-construct the list of searchable metadata fields
    $fields = explode( ';' , variable_get('bhle_search_fields', BHLE_SEARCH_FIELDS) );
    $fields = array_combine($fields, $fields);
    $fields[variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD)] = variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD);
    $fields[variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD)] = variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD);
    $fields[variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD)] = variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD);
    $fields[variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD)] = variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD);

    $form['condition_' . $id] = array(
        '#type' => 'fieldset',
        '#weight' => $id,
        '#attributes' => array(
            'class' => ( $id == count($total_count) ) ? array('last') : array(''),
            'name' => 'condition_' . $id,
        ),
        'term_label_' . $id => array(
            '#type' => 'markup',
            '#markup' => '<label>' . t('type what do you want to search') . '</label>',
        ),
        'term_' . $id => array(
            '#type' => 'textfield',
            '#title' => t(''),
            '#default_value' => $term,
            '#attributes' => array(
                //'onblur' => "if (this.value == '') {this.value = '" . t('type what do you want to search') . "';}",
                //'onfocus' => "if (this.value == '" . t('type what do you want to search') . "') {this.value = '';}",
            ),
        ),
        'field_' . $id => array(
            '#type' => 'select',
            '#title' => '',
            '#options' => $fields,
            '#default_value' => $field,
        ),
        'operator_' . $id => array(
            '#type' => 'select',
            '#title' => '',
            '#options' => array(
                'AND' => t('AND'),
                'OR' => t('OR'),
                'NOT' => t('NOT'),
            ),
            '#default_value' => $operator,
        ),
/*        'addcondition_' . $id => array(
            '#type' => 'submit',
            '#value' => t('Add'),
            '#ajax' => array(
                'callback' => 'bhle_search_ajax_add_condition',
                'wrapper' => 'edit-condition-' . $id,
                'method' => 'after',
                'effect' => 'fade',
            ),
        ),*/

        // Drupal does not support input type=button in its form API, so that's why we have to use markup
        'delcondition_' . $id => array(
            '#type' => 'markup',
            '#markup' => '<input onclick="bhle_search.remove_condition( ' . $id . ' );" type="button" id="edit-delcondition-' . $id . '" name="delcondition_' . $id . '" value="' . t('Del') . '" />',
        ),
    );

    return $form;
}

/**
 * Implements hook_FORMID_form_alter()
 * (aka Advanced Search)
 */
function bhle_search_form_search_form_alter(&$form, $form_state) {
    // Remove basic form since we build a completely custom one
    unset($form['basic']);

    // Fetch all setup conditions
    $conditions = $_SESSION['bhle_search']['conditions'];
    // Add an empty condition (results in an empty row)
    $conditions[] = array( 'term' => '', 'field' => '', 'operator' => '' );

    // Add common checkboxes to form
    $form['expand_search'] = array(
        '#type' => 'checkbox',
        '#title' => t('expand search'),
        '#default_value' => (isset($_SESSION['bhle_search']['expand_search'])) ? $_SESSION['bhle_search']['expand_search'] : 0,
        '#weight' => -2,
    );

    $form['exact_phrase'] = array(
        '#type' => 'checkbox',
        '#title' => t('exact word / phrase'),
        '#default_value' => (isset($_SESSION['bhle_search']['exact_phrase'])) ? $_SESSION['bhle_search']['exact_phrase'] : 0,
        '#weight' => -1,
    );

    // Finally iterate over conditions and add each of them as form row
    $weight = 1;
    foreach( $conditions as $condition ) {
        $form = bhle_search_add_condition($form, $weight, count($conditions), $condition['term'], $condition['field'], $condition['operator']);
        $weight++;
    }

    // Store the number of conditions as a hidden field
    /*$form['num_conditions'] = array(
        '#type' => 'hidden',
        '#default_value' => count($conditions),
        '#weight' => $weight++,
    );*/

    // Add submit / reset / save-query buttons
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#weight' => $weight++,
    );
    $form['reset'] = array(
        '#type' => 'submit',
        '#value' => t('Reset'),
        '#weight' => $weight++,
    );
    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save Query'),
        '#weight' => $weight++,
    );

    // Add custom validate handler
    $form['#validate'] = array( 'bhle_search_advanced_validate' );

    // Load our form javascript
    $form['#attached']['js'] = array(
        drupal_get_path( 'module', 'bhle_search' ) . '/js/advanced_search.js',
    );

    return $form;
}

/**
 * AJAX callback for dynamically adding new conditions to the search page
 */
function bhle_search_ajax_add_condition($form, $form_state) {
    $form = bhle_search_add_condition($form, 5, 0 );

    // Render row and return it
    return $form['condition_5'];
}

/**
 * Validate the simple search form
 */
function bhle_search_simple_validate($form, &$form_state) {
    $conditions = array();

    // Check for a valid date
    // Note: Code is required, since solr expects a special date format if the field is marked as date-type
    $year = $form_state['values']['year'];
    // Check if we just have a number
    if( !is_numeric($year) ) $year = strtotime( $year );
    if( $year === false ) {
        form_set_error('year', t('Invalid year format'));
    }
    else {
        $year = date( '%N', $year );
    }

    if($form_state['values']['title']) $conditions[] = array( 'term' => $form_state['values']['search_block_form'], 'field' => variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD), 'operator' => 'OR' );
    if($form_state['values']['author']) $conditions[] = array( 'term' => $form_state['values']['search_block_form'], 'field' => variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD), 'operator' => 'OR' );
    if($form_state['values']['year']) $conditions[] = array( 'term' => $form_state['values']['search_block_form'], 'field' => variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD), 'operator' => 'OR' );
    if($form_state['values']['scientific_name']) $conditions[] = array( 'term' => $form_state['values']['search_block_form'], 'field' => variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD), 'operator' => 'OR' );

    // Official way to handle sessions is by directly writing into the super-globals
    // See: http://api.drupal.org/api/drupal/includes--session.inc
    $_SESSION['bhle_search']['conditions'] = $conditions;
    $_SESSION['bhle_search']['expand_search'] = 0;      // Turn of search term expansion in simple search
    $_SESSION['bhle_search']['exact_phrase'] = 0;      // Turn of search term expansion in simple search
}

/**
 * Validate the advanced search form
 */
function bhle_search_advanced_validate($form, &$form_state) {
    $conditions = array();
    $values = $form_state['values'];

    for( $i = 1; $i <= $values['num_conditions']; $i++ ) {
        if( !empty($values['term_' . $i]) ) {
            $conditions[] = array( 'term' => $values['term_' . $i], 'field' => $values['field_' . $i], 'operator' => $values['operator_' . $i] );
        }
    }

    // Unfortunately drupal forces us to set the processed_keys even if we have a complete custom search function
    $form_state['values']['processed_keys'] = "empty";

    // Official way to handle sessions is by directly writing into the super-globals
    // See: http://api.drupal.org/api/drupal/includes--session.inc
    $_SESSION['bhle_search']['conditions'] = $conditions;
    $_SESSION['bhle_search']['expand_search'] = $values['expand_search'];
    $_SESSION['bhle_search']['exact_phrase'] = $values['exact_phrase'];
}

/**
 * Callback which returns the search conditions (referenced in bhle_search_search_info)
 */
function bhle_search_conditions($keys) {
    return $_SESSION['bhle_search']['conditions'];
}

/**
 * Helper function for escaping a string for use in a solr query
 */
function bhle_search_solr_escape($string) {
    // + - && || ! ( ) { } [ ] ^ " ~ * ? : \ => see http://lucene.apache.org/java/3_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
    return str_replace( array(
        '+', '-', '&&', '||', '!', '(', ')', '{', '}', '[', ']', '^', '"', '~', '*', '?', ':', '\\',
    ), array(
        '\\+', '\\-', '\\&\\&', '\\|\\|', '\\!', '\\(', '\\)', '\\{', '\\}', '\\[', '\\]', '\\^', '\\"', '\\~', '\\*', '\\?', '\\:', '\\\\',
    ), $string );
}

/**
 * Helper function which converts an array of terms into a solr query
 */
function bhle_search_solr_build_query($terms, $operator = 'OR') {
    // Check for valid arguments
    if( !is_array($terms) || count($terms) <= 0 ) return "";

    // Escape all terms
    array_walk($terms, "bhle_search_solr_escape");

    // Add outer brackets
    $query_term = implode( '" ' . $operator . ' "' , $terms);
    $query_term = '( "' . $query_term . '" )';

    // Return prepare query-string
    return $query_term;
}

/**
 * Implements hook_search_execute()
 * Execute the search and return the results
 */
function bhle_search_search_execute($keys = NULL, $conditions = NULL) {
    $solr = apachesolr_get_solr( variable_get('bhle_search_solr_core') );
    $query = '';
    $results = array();

    // Build Solr query out of the conditions
    foreach( $conditions as $condition ) {
        // Escape the search-term
        $query_term = bhle_search_solr_escape($condition['term']);

        // Check if search term expansion is turned on
        if( $_SESSION['bhle_search']['expand_search'] ) {
            // Check if we are looking for an author
            if( $condition['field'] == variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD) ) {
                // Check if VIAF module is active
                if( module_exists('viaf_lookup') ) {
                    // Fetch list of authors
                    $viaf_authors = viaf_lookup_authors_simple( $condition['term'] );

                    // Check if we found any authors, if yes add them as term
                    if( is_array($viaf_authors) && count($viaf_authors) > 0 ) {
                        // Add original term since we want to include it as well
                        $viaf_authors[] = $condition['term'];
                        $query_term = bhle_search_solr_build_query($viaf_authors);
                    }
                }
                else {
                    drupal_set_message( 'VIAF-Module not active!', 'error' );
                }
            }
            // Check if we are looking for a scientific name
            else if( $condition['field'] == variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD) ) {
                if( module_exists('names_lookup') ) {
                    $synonyms_list = names_lookup_synonyms( $condition['term'] );

                    // Check if we found any synonyms, if yes add to term
                    if( is_array($synonyms_list) && count($synonyms_list) > 0 ) {
                        $synonyms = array();
                        foreach( $synonyms_list as $synonym_entry ) {
                            $synonyms[] = $synonym_entry['name'];
                        }

                        // Add original term since we want to include it as well
                        $synonyms[] = $condition['term'];
                        $query_term = bhle_search_solr_build_query($synonyms);
                    }
                }
                else {
                    drupal_set_message( 'Names-Module not active!', 'error' );
                }
            }
        }

        // Append to query
        if( !empty($query) ) $query .= ' ' . $condition['operator'] . ' ';
        $query .= $condition['field'] . ':' . $query_term;
    }

    try {
        // Query solr
        $responseObj = $solr->search($query);
        $response = $responseObj->response;
        // Check if we found something
        if ($response->numFound > 0) {
            $docs = $response->docs;
            $titleField = variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD);
            foreach ($docs as $doc) {
                $titleArray = $doc->$titleField; // the solr response contains an array per field!!!
                $results[] = array(
                    'link' => url('empty.html'),
                    'title' => $titleArray[0]
                );
            }
        }
    }
    catch (Exception $e) {
    }

    return $results;
}

/**
 * Implements hook_menu().
 */
function bhle_search_menu() {
    $items = array();

    $items['admin/config/search/bhle'] = array(
        'title' => 'BHLE Search',
        'description' => 'Configuration for the BHLE search module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bhle_search_config_simple_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/config/search/bhle/simple'] = array(
        'title' => 'Simple',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bhle_search_config_simple_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/config/search/bhle/advanced'] = array(
        'title' => 'Advanced',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bhle_search_config_advanced_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_LOCAL_TASK,
    );


    return $items;
}

/**
 * Form function, called by drupal_get_form()
 * in bhle_search_menu().
 */
function bhle_search_config_simple_form($form, &$form_state) {
    $form['bhle_search_title_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for TITLE information.'),
        '#default_value' => variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the title information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_author_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for AUTHOR information.'),
        '#default_value' =>  variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the author information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_year_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for YEAR information.'),
        '#default_value' => variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the year information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_scientific_name_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for SCIENTIFIC NAME information.'),
        '#default_value' => variable_get('bhle_search_scienific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the scientific name information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_fields'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr other searchable fields.'),
        '#default_value' => variable_get('bhle_search_fields', BHLE_SEARCH_FIELDS),
        '#size' => 15,
        '#description' => t('Semi-colon separated list with names of other fields searchable via Solr.'),
        '#required' => TRUE,
    );

    // Load all environments from the apachesolr module and list them in our settings
    $environments = apachesolr_load_all_environments();
    $options = array();
    foreach( $environments as $id => $environment ) {
        $options[$id] = $environment['name'];
    }
    $form['bhle_search_solr_core'] = array(
        '#type' => 'select',
        '#title' => t('Apache Solr core to use for querying.'),
        '#default_value' => variable_get('bhle_search_solr_core', 'solr'),
        '#description' => t('Set the Apache Solr core which is used for executing a query.'),
        '#required' => TRUE,
        '#options' => $options,
    );

    return system_settings_form($form);
}

/**
 * Form function, called by drupal_get_form()
 * in bhle_search_menu().
 */
function bhle_search_config_advanced_form($form, &$form_state) {
    return system_settings_form($form);
}
