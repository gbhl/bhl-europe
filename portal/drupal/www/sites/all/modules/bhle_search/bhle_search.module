<?php

/**
  Copyright (c) 2011, Museum of Natural History Vienna
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
 * Neither the name of the Museum of Natural History Vienna nor the
  names of its contributors may be used to endorse or promote products
  derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL Museum of Natural History Vienna BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// Pre-defined variables (note: defaults are based on Solr's default schema)
define('BHLE_SEARCH_FACET_LIMIT', 1000); // need to index more items then shown
define('BHLE_SEARCH_DEFAULT_LIMIT', 12);
define('BHLE_SEARCH_TITLE_FIELD', 'name');
define('BHLE_SEARCH_AUTHOR_FIELD', 'author');
define('BHLE_SEARCH_YEAR_FIELD', 'last_modified');
define('BHLE_SEARCH_SCIENTIFIC_NAME_FIELD', 'keywords');
define('BHLE_SEARCH_COMMON_NAME_FIELD', 'keywords_copy');
define('BHLE_SEARCH_DEFAULT_TERM', 'type what do you want to search');
/**
 * Suggested default metadata fields for Advanced search mapped to mods solr fields:
  a.	All metadata fields â€“ including the abstract [=all]
  b.	Title [=mods_title]
  c.	Journal title [=mods_title]
  d.	Author [=mods_name]
  e.	Year [=mods_date_issued]
  f.	Language of the text [=mods_language]
  g.	Publisher [=mods_publisher]
  h.	Place of publishing [=mods_place]
  i.	Content provider [=mods_record_content_source ?]
  j.	Abstract [=mods_abstract]
  k.	Scientific name [- NA -]
  l.	Monograph (content type) [- NA -]
  m.	Article (content type) [- NA -]
  n.	Journal/Serial (content type) [- NA -]
 *
 */
define('BHLE_SEARCH_FIELDS', 'PID;mods_language;mods_place;mods_record_content_source;mods_abstract');

/**
 * Implements hook_init()
 */
function bhle_search_init() {
  // Initialize the session array (if necessary)
  if (!isset($_SESSION['bhle_search']) || !isset($_SESSION['bhle_search']['conditions'])) {
      $_SESSION['bhle_search'] = array(
          'conditions' => array(
              array('term' => '', 'field' => '', 'operator' => '', 'exact_phrase' => 0)   // Advanced search conditions
          ),
          'expand_search' => 0, // Enable search term expansion
          'exact_phrase' => 0, // Exact phrase matching
          'simple_condition' => array(
              'phrase' => '', // Simple search string (overwrites advanced search)
              'fields' => array(// List of fields to search in
                  'title' => 0,
                  'author' => 0,
                  'year' => 0,
                  'scientific_name' => 0,
              ),
          ),
          'simple_search' => false, // Set to true when running simple search
      );
  }
  /* FACET HANDLING */
  if ($_GET['action'] == 'addfacet' && $_SESSION['bhle_search']['facet']['last'] != $_GET['last'] && $_GET['source'] == 'browse') {
    unset($_SESSION['bhle_search']['conditions']);
    $_SESSION['bhle_search']['simple_search'] = FALSE;
    $_SESSION['bhle_search']['facet']['last'] = $_GET['last'];
    $field = $_GET['field']; // TODO: escape for security
    $key = $_GET['key']; // TODO: escape for security
    $condition = array(
      'term' => bhle_search_solr_escape(urldecode($key)),
      'field' => $field,
      'operator' => 'AND',
      'exact_phrase' => 0
    );
    $_SESSION['bhle_search']['conditions'][] = $condition;
  }
  if ($_GET['action'] == 'addfacet' && $_SESSION['bhle_search']['facet']['last'] != $_GET['last'] && $_GET['source'] == 'advanced') {
    $_SESSION['bhle_search']['facet']['last'] = $_GET['last'];
    $field = $_GET['field']; // TODO: escape for security
    $key = $_GET['key']; // TODO: escape for security
    $condition = array(
      'term' => bhle_search_solr_escape($_SESSION['bhle_search']['facet']['fields'][$field][$key]['#label']),
      'field' => $field,
      'operator' => 'AND',
      'exact_phrase' => 0
    );
    $_SESSION['bhle_search']['conditions'][] = $condition;
  }
  if ($_GET['action'] == 'addfacet' && $_SESSION['bhle_search']['facet']['last'] != $_GET['last'] && $_GET['source'] == 'simple') {
    unset($_SESSION['bhle_search']['conditions']);
    $_SESSION['bhle_search']['simple_search'] = FALSE;
    $query = bhle_search_solr_escape($_SESSION['bhle_search']['simple_condition']['phrase']);
    $condition = array(
      'term' => bhle_search_solr_escape($query),
      'field' => 'simple', // dummy field
      'operator' => 'OR',
      'exact_phrase' => 0
    );
    $_SESSION['bhle_search']['conditions'][] = $condition;

    $field = $_GET['field']; // TODO: escape for security
    $key = $_GET['key']; // TODO: escape for security
    /* TODO: find solution for complex queries */
    $condition = array(
      'term' => bhle_search_solr_escape($_SESSION['bhle_search']['facet']['fields'][$field][$key]['#label']),
      'field' => $field,
      'operator' => 'AND',
      'exact_phrase' => 0
    );
    $_SESSION['bhle_search']['conditions'][] = $condition;
  }
  if ($_GET['action'] == 'removefacet' && $_SESSION['bhle_search']['facet']['last'] != $_GET['last']) {
    $_SESSION['bhle_search']['facet']['last'] = $_GET['last'];
    $field = $_GET['field']; // TODO: escape for security
    $key = $_GET['key']; // TODO: escape for security
    foreach ($_SESSION['bhle_search']['conditions'] as $delta => $condition) {
      if ($condition['field'] == $field &&
            (
              $condition['term'] == $_SESSION['bhle_search']['facet']['fields'][$field][$key]['#label'] ||
              bhle_search_solr_escape($condition['term']) == $_SESSION['bhle_search']['facet']['fields'][$field][$key]['#label'] ||
              $condition['term'] == bhle_search_solr_escape($_SESSION['bhle_search']['facet']['fields'][$field][$key]['#label'])
            )
          ){
        unset($_SESSION['bhle_search']['conditions'][$delta]);
      }
    }
  }
  /* END FACET HANDLING */
}

/**
 * Implements hook_search_info()
 */
function bhle_search_search_info() {
    return array(
        'title' => 'bhle',
        'path' => 'bhle',
        'conditions_callback' => 'bhle_search_conditions',
    );
}

/**
 * Implements hook_FORMID_form_alter()
 * (aka Simple Search)
 */
function bhle_search_form_search_block_form_alter(&$form, $form_state) {
    $conditions = $_SESSION['bhle_search']['conditions'];

    // add a label (required for layout)
    $form['search_description'] = array(
        '#type' => 'markup',
        '#markup' => '<label>' . t('search in') . '</label>',
        '#weight' => -11,
    );

    $form['title'] = array(
        '#type' => 'checkbox',
        '#title' => t('Title'),
        '#default_value' => 1,
        '#weight' => -10,
    );

    $form['author'] = array(
        '#type' => 'checkbox',
        '#title' => t('Author'),
        '#default_value' => 1,
        '#weight' => -9,
    );

    $form['year'] = array(
        '#type' => 'checkbox',
        '#title' => t('Year'),
        '#default_value' => 1,
        '#weight' => -8,
    );

    $form['scientific_name'] = array(
        '#type' => 'checkbox',
        '#title' => t('Scientific Name'),
        '#default_value' => 0,
        '#weight' => -7,
    );

    $form['#validate'][] = 'bhle_search_simple_validate';

    // add autocomplete functionality
    if (module_exists("apachesolr_autocomplete")) {
        $element = &$form['basic']['keys'];
        apachesolr_autocomplete_do_alter($element);
        // add style sheet to fix issues with autocomplete field
        drupal_add_css(drupal_get_path('module', 'bhle_search') . '/bhle_search.css');
    }

    return $form;
}

/**
 * Add an advanced condition form-row to a given form reference and return it
 */
function bhle_search_advanced_add_condition(&$form, $id, $total_count, $term = BHLE_SEARCH_DEFAULT_TERM, $exact_phrase = 0, $field = '', $operator = '', $bNoDel = false) {

	// Pre-construct the list of searchable metadata fields
    $fields_b = explode(';', variable_get('bhle_search_fields', BHLE_SEARCH_FIELDS));
    $fields_b = array_combine($fields_b, $fields_b);

    $fields[variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD)] = variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD);
    $fields[variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD)] = variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD);
    $fields[variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD)] = variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD);
    $fields[variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD)] = variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD);
    $fields[variable_get('bhle_search_common_name_field', BHLE_SEARCH_COMMON_NAME_FIELD)] = variable_get('bhle_search_common_name_field', BHLE_SEARCH_COMMON_NAME_FIELD);

    $fields = array_merge($fields, $fields_b);

    // set correct labels for all fields

    foreach(array_keys($fields) as $key){
    	$fields[$key] = t(field_name_label($key));
    }

    // Check if a valid term was passed
    if (empty($term))
        $term = BHLE_SEARCH_DEFAULT_TERM;

    $form['condition_' . $id] = array(
        '#type' => 'fieldset',
        '#weight' => $id,
        '#attributes' => array(
            'class' => ( $id == count($total_count) ) ? array('last') : array(''),
            'name' => 'condition_' . $id,
        ),
        'term_label_' . $id => array(
            '#type' => 'markup',
            '#markup' => '<label>' . t(BHLE_SEARCH_DEFAULT_TERM) . '</label>',
        ),
        'term_' . $id => array(
            '#type' => 'textfield',
            '#title' => t(''),
            '#default_value' => $term,
            '#attributes' => array(
                'onblur' => "if (this.value == '') {this.value = '" . t(BHLE_SEARCH_DEFAULT_TERM) . "';}",
                'onfocus' => "if (this.value == '" . t(BHLE_SEARCH_DEFAULT_TERM) . "') {this.value = '';}",
                'name' => 'term_' . $id,
            ),
        ),

        'operator_or_' . $id => array(
            '#type' => 'button',
            '#default_value' => 'OR',
            '#attributes' => array(
                'class' => array('operator-or' , 'edit-or'),
            ),
        ),

        'operator_not_' . $id => array(
            '#type' => 'button',
            '#default_value' => 'NOT',
            '#attributes' => array(
                'class' => array('operator-not' , 'edit-not'),
            ),
        ),

        'exact_phrase_' . $id => array(
            '#type' => 'checkbox',
            '#title' => '',
            '#default_value' => $exact_phrase,
            '#attributes' => array(
                'class' => array('exact-phrase'),
                'name' => 'exact_phrase_' . $id,
            ),
        ),
        'field_' . $id => array(
            '#type' => 'select',
            '#title' => '',
            '#options' => $fields,
            '#default_value' => $field,
            '#attributes' => array(
                'class' => array('select-field'),
                'name' => 'field_' . $id,
            ),
        ),
    );

    // Check if we have to add a delete button
    if (!$bNoDel) {
        $form['condition_' . $id]['delcondition_' . $id] = array(
            '#type' => 'button',
            '#value' => 'delcondition_' . $id,
            '#ajax' => array(
                'callback' => 'bhle_search_advanced_del_ajax',
                'wrapper' => 'fields-block-wrapper',
                'method' => 'replace',
            ),
            '#validate' => array(
                'bhle_search_advanced_del_validate'
            ),
            '#attributes' => array(
                'class' => array('input-delcondition', 'edit-delfield'),
            ),
        );
    }

    return $form;
}

/**
 * Implements hook_FORMID_form_alter()
 * (aka Advanced Search)
 */
function bhle_search_form_search_form_alter(&$form, $form_state) {
    // Remove basic form since we build a completely custom one
    unset($form['basic']);

    // Check if we have to add a new condition, or if the conditions array is empty
    if( count($_SESSION['bhle_search']['conditions']) <= 0 || (isset($form_state['values']) && $form_state['values']['op'] == t('Add field')) )  {
        $_SESSION['bhle_search']['conditions'][] = array('term' => '', 'field' => '', 'operator' => '', 'exact_phrase' => 0);
    }
    // else check if we want to remove one
    else if (isset($form_state['values']) && strpos($form_state['values']['op'], 'delcondition_') === 0) {
        $matches = array();
        if (preg_match('/delcondition_(\d+)/', $form_state['values']['op'], $matches) > 0) {
            $condition_id = $matches[1];

            unset($_SESSION['bhle_search']['conditions'][$condition_id]);
        }
    }

    // Fetch all setup conditions
    $conditions = $_SESSION['bhle_search']['conditions'];

    // Add advanced search label
    $form['search_label'] = array(
        '#type' => 'markup',
        '#markup' => '<label>' . t('advanced search') . '</label>',
        '#weight' => -3,
    );

    // Add common checkboxes to form
    $form['expand_search'] = array(
        '#type' => 'checkbox',
        '#title' => t('expand search'),
        '#default_value' => (isset($_SESSION['bhle_search']['expand_search'])) ? $_SESSION['bhle_search']['expand_search'] : 0,
        '#weight' => -2,
    );

    $form['exact_phrase'] = array(
        '#type' => 'checkbox',
        '#title' => t('exact word / phrase'),
        '#default_value' => (isset($_SESSION['bhle_search']['exact_phrase'])) ? $_SESSION['bhle_search']['exact_phrase'] : 0,
        '#weight' => -1,
        '#attributes' => array(
            'onclick' => "bhle_search.exact_phrase( jQuery(this) );",
        ),
    );

    // Finally iterate over conditions and add each of them as form row
    $weight = 0;
    $bNoDel = count($conditions) <= 1;
    $form_conditions = array(
        '#type' => 'markup',
        '#markup' => '',
        '#prefix' => '<div class="fields-block-wrapper" id="fields-block-wrapper"><div class="fields-block" id="fields-block">',
        '#suffix' => '</div></div>',
    );
    foreach ($conditions as $condition_id => $condition) {
        $form_conditions = bhle_search_advanced_add_condition($form_conditions, $condition_id, count($conditions), $condition['term'], $condition['exact_phrase'], $condition['field'], $condition['operator'], $bNoDel);
        $weight = $condition_id;
    }
    // Add conditions to form layout
    $form['form_conditions'] = $form_conditions;

    // Store the number of conditions as a hidden field
    $form['form_conditions']['num_conditions'] = array(
        '#type' => 'hidden',
        '#value' => $weight,
        '#weight' => $weight++,
    );

    // Add submit / add / reset / save-query buttons
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#weight' => $weight++,
    );
    $form['add'] = array(
        '#type' => 'button',
        '#value' => t('Add field'),
        '#weight' => $weight++,
        '#ajax' => array(
            'callback' => 'bhle_search_advanced_add_ajax',
            'wrapper' => 'fields-block-wrapper',
            'method' => 'replace',
        ),
        '#validate' => array(
            'bhle_search_advanced_add_validate'
        ),
    );
    $form['reset'] = array(
        '#type' => 'submit',
        '#value' => t('Reset'),
        '#weight' => $weight++,
    );
    $form['save'] = array(
        '#type' => 'submit',
        '#value' => t('Save Query'),
        '#weight' => $weight++,
    );

    // Add custom validate handler
    $form['#validate'] = array('bhle_search_advanced_validate');

    // Load our form javascript
    $form['#attached']['js'] = array(
        drupal_get_path('module', 'bhle_search') . '/js/advanced_search.js',
    );

    return $form;
}

/**
 * AJAX callback for dynamically adding new conditions to the search page
 */
function bhle_search_advanced_add_ajax($form, $form_state) {
    return $form['form_conditions'];
}

/**
 * AJAX callback for dynamically removing conditions from the search page
 */
function bhle_search_advanced_del_ajax($form, $form_state) {
    return $form['form_conditions'];
}

/**
 * Validate the simple search form
 */
function bhle_search_simple_validate($form, &$form_state) {
    $conditions = array();

    // Check for a valid date
    // Note: Code is required, since solr expects a special date format if the field is marked as date-type
    /* $year = $form_state['values']['year'];
      // Check if we just have a number
      if( !is_numeric($year) ) $year = strtotime( $year );
      if( $year === false ) {
      form_set_error('year', t('Invalid year format'));
      }
      else {
      $year = date( '%N', $year );
      } */

    // Save the condition parameters
    $_SESSION['bhle_search']['simple_condition'] = array(
        'phrase' => trim($form_state['values']['search_block_form']),
        'fields' => array(
            'title' => $form_state['values']['title'],
            'author' => $form_state['values']['author'],
            'year' => $form_state['values']['year'],
            'scientific_name' => $form_state['values']['scientific_name'],
        ),
    );

    // Official way to handle sessions is by directly writing into the super-globals
    // See: http://api.drupal.org/api/drupal/includes--session.inc
    $_SESSION['bhle_search']['expand_search'] = 0;      // Turn of search term expansion in simple search
    $_SESSION['bhle_search']['exact_phrase'] = 0;      // Turn of search term expansion in simple search

    // Remember simple search as our starting point
    $_SESSION['bhle_search']['simple_search'] = true;
}

/**
 * Validate the advanced search form
 */
function bhle_search_advanced_validate($form, &$form_state) {
    $conditions = array();
    $values = $form_state['values'];

    for ($i = 0; $i <= $values['num_conditions']; $i++) {
        // Check if condition-row exists (might have been removed client-side)
        if (!isset($values['term_' . $i]))
            continue;

        // Fetch the current term
        $term = trim($values['term_' . $i]);
        // Check term for validity
        if (!empty($term) && $term != BHLE_SEARCH_DEFAULT_TERM) {
            $conditions[] = array('term' => $term, 'field' => $values['field_' . $i], 'operator' => $values['operator_' . $i], 'exact_phrase' => $values['exact_phrase_' . $i]);
        }
    }

    // Unfortunately drupal forces us to set the processed_keys even if we have a complete custom search function
    $form_state['values']['processed_keys'] = "empty";

    // Official way to handle sessions is by directly writing into the super-globals
    // See: http://api.drupal.org/api/drupal/includes--session.inc
    $_SESSION['bhle_search']['conditions'] = $conditions;
    $_SESSION['bhle_search']['expand_search'] = $values['expand_search'];
    $_SESSION['bhle_search']['exact_phrase'] = $values['exact_phrase'];

    // Remember advanced search as our starting point
    $_SESSION['bhle_search']['simple_search'] = false;}

/**
 * Callback (AJAX) when the 'Add Field' button is clicked
 * Dummy function which prevents the global validation handler from running
 */
function bhle_search_advanced_add_validate($form, &$form_state) {

}

/**
 * Callback (AJAX) when the 'Del Field' button is clicked
 * Dummy function which prevents the global validation handler from running
 */
function bhle_search_advanced_del_validate($form, &$form_state) {

}

/**
 * Callback which returns the search conditions (referenced in bhle_search_search_info)
 * @param $keys (unused)
 */
function bhle_search_conditions($keys = null) {
    return $_SESSION['bhle_search']['conditions'];
}

/**
 * Helper function for escaping a string for use in a solr query
 */
function bhle_search_solr_escape($string) {
    // + - && || ! ( ) { } [ ] ^ " ~ * ? : \ => see http://lucene.apache.org/java/3_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
    // wildcards: * ? are the only allowed characters!
    $escaped_str = str_replace(array(
                '+', '-', '&&', '||', '!', '(', ')', '{', '}', '[', ']', '^', '"', '~', ':', '\\',
                    ), array(
                '\\+', '\\-', '\\&\\&', '\\|\\|', '\\!', '\\(', '\\)', '\\{', '\\}', '\\[', '\\]', '\\^', '\\"', '\\~', '\\:', '\\\\',
                    ), $string);

    // allow using escape sequences like \\[ in the original $string
    $escaped_str = str_replace('\\\\\\', '', $escaped_str);
    return $escaped_str;
}

/**
 * Helper function which converts an array of terms into a solr query
 * (used by search term amplification)
 */
function bhle_search_solr_build_query($terms, $operator = 'OR') {
    // Check for valid arguments
    if (!is_array($terms) || count($terms) <= 0)
        return "";

    // Escape all terms
    array_walk($terms, "bhle_search_solr_escape");

    // Add operator & quotes
    $query_term = implode('" ' . $operator . ' "', $terms);
    $query_term = '"' . $query_term . '"';

    // Return prepare query-string
    return $query_term;
}

/**
 * Implements hook_search_execute()
 * Execute the search and return the results
 */
function bhle_search_search_execute($keys = NULL, $conditions = NULL) {
    $solr = apachesolr_get_solr(variable_get('bhle_search_solr_core'));
    $query = '';
    $results = array();
    $params = array();
    // Check for simple search (uses the dismax parser)
    if ($_SESSION['bhle_search']['simple_search']) {
        $query = bhle_search_solr_escape($_SESSION['bhle_search']['simple_condition']['phrase']);

        // Create list of fields
        $fields = array();
        if ($_SESSION['bhle_search']['simple_condition']['fields']['title']) {
            $fields[] = variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD);
        }
        if ($_SESSION['bhle_search']['simple_condition']['fields']['author']) {
            $fields[] = variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD);
        }
        if ($_SESSION['bhle_search']['simple_condition']['fields']['year']) {
            $fields[] = variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD);
        }
        if ($_SESSION['bhle_search']['simple_condition']['fields']['scientific_name']) {
            $fields[] = variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD);
        }

        if(_is_wildcard_query($query)) {
        	$fields_exact = array();
        	foreach($fields as $field){
        		$fields_exact[] = $field . '__exact';
        	}
        	$fields = array_merge($fields, $fields_exact);
        }

        // Configure dismax parser
        $params['defType'] = 'edismax';
        $params['qf'] = implode(' ', $fields);

    }
    // ...we have advanced search
    else {
        // Build Solr query out of the conditions

        // $previous_condition_operator will  hold the condition operator of the previous condition
        $previous_condition_operator = null;
        foreach ($conditions as $condition) {

            // Get the query field
            $query_field = $condition['field'];
            // Escape the search-term
            $query_term = bhle_search_solr_escape($condition['term']);

            // Check if we have to quote the term
            if ($condition['exact_phrase']) {
                $query_term = '"' . $query_term . '"';
                $query_field .= '__exact';  // Change to exact index
            }

            // Check if search term expansion is turned on
            if ($_SESSION['bhle_search']['expand_search']) {
                // Check if we are looking for an author
                if ($condition['field'] == variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD)) {
                    // Check if VIAF module is active
                    if (module_exists('viaf_lookup')) {
                        // Fetch list of authors
                        $viaf_authors = viaf_lookup_authors_simple($condition['term']);

                        // Check if we found any authors, if yes add them as term
                        if (is_array($viaf_authors) && count($viaf_authors) > 0) {
                            // Add original term since we want to include it as well
                            $viaf_authors[] = $condition['term'];
                            $query_term = bhle_search_solr_build_query($viaf_authors);
                        }
                    } else {
                        drupal_set_message('VIAF-Module not active!', 'error');
                    }
                }
                // Check if we are looking for a scientific name
                else if ($condition['field'] == variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD)) {
                    if (module_exists('names_lookup')) {
                        $synonyms_list = names_lookup_synonyms($condition['term']);

                        // Check if we found any synonyms, if yes add to term
                        if (is_array($synonyms_list) && count($synonyms_list) > 0) {
                            $synonyms = array();
                            foreach ($synonyms_list as $synonym_entry) {
                                $synonyms[] = $synonym_entry['name'];
                            }

                            // Add original term since we want to include it as well
                            $synonyms[] = $condition['term'];
                            $query_term = bhle_search_solr_build_query($synonyms);
                        }
                    } else {
                        drupal_set_message('Names-Module not active!', 'error');
                    }
                }
                // Check if we are looking for a (journal) title
                else if ($condition['field'] == variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD)) {
                    if (module_exists('journals_lookup')) {
                        $titles_list = journals_lookup_acronym($condition['term']);

                        // Check if we found any titles, if yes add to term
                        if (is_array($titles_list) && count($titles_list) > 0) {
                            // Add original term since we want to include it as well
                            $titles_list[] = $condition['term'];
                            $query_term = bhle_search_solr_build_query($titles_list);
                        }
                    } else {
                        drupal_set_message('Journals-Module not active!', 'error');
                    }
                }
                // Check if we are looking for a common name
                else if ($condition['field'] == variable_get('bhle_search_common_name_field', BHLE_SEARCH_COMMON_NAME_FIELD)) {
                    if (module_exists('names_lookup')) {
                        $scientifics_list = names_lookup_common_name($condition['term']);

                        // Check if we found any synonyms, if yes add to term
                        if (is_array($scientifics_list) && count($scientifics_list) > 0) {
                            $scientific_names = array();
                            foreach ($scientifics_list as $scientific_name) {
                                $scientific_names[] = $scientific_name['name'];
                            }

                            // Add original term since we want to include it as well
                            $scientific_names[] = $condition['term'];
                            $query_term = bhle_search_solr_build_query($scientific_names);
                        }
                    } else {
                        drupal_set_message('Names-Module not active!', 'error');
                    }
                }
            }
            // Append to query
            if($query_field == 'simple') {
              if($query) { $query .= ' ' . $condition['operator'] . ' '; }
              $query .= '(';
              foreach($_SESSION['bhle_search']['simple_condition']['fields'] as $delta => $value) {
                if($value == 1) {
                  switch ($delta) {
                    case 'title':
                      if($in_query) { $query .= ' OR '; }
                      $query .= variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD) . ':' . $query_term . '';
                      $in_query = 1;
                      break;
                    case 'author':
                      if($in_query) { $query .= ' OR '; }
                      $query .= variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD) . ':' . $query_term . '';
                      $in_query = 1;
                      break;
                    case 'year':
                      if($in_query) { $query .= ' OR '; }
                      $query .= variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD) . ':' . $query_term . '';
                      $in_query = 1;
                      break;
                    case 'scientific_name':
                      if($in_query) { $query .= ' OR '; }
                      $query .= variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD) . ':' . $query_term . '';
                      $in_query = 1;
                      break;
                  }
                }
              }
              $query .= ')';
            } else {
                if( _is_wildcard_query($query_term) && !$condition['exact_phrase']) {
                    // lowercase the full $query_term if it is not an exact search.
                    // This step is needed to normalize tokens in the case
                    // of wildcard searches. All analyzers are ommited in this case.
                    // but preserve ' AND ', ' OR ', ' TO '
                    $query_term = strtolower( $query_term );
                    $query_term = str_replace(array(' and ', ' or ', ' to '), array(' AND ', ' OR ', ' TO '), $query_term);

                }
                $query .= ($previous_condition_operator ? ' ' . $previous_condition_operator . ' ' : '') . _wildcard_save_query_token($query_field, $query_term, TRUE);
            }

            $search_summary_query_info = array(
              'query_field' => $query_field,
              'query_term' => $query_term
            );

            bhle_search_search_summary_add($condition, $search_summary_query_info);
            $previous_condition_operator = strtoupper( $condition['operator'] );
        } // END of loop over conditions

    }

    // Do not search if there is no query
    if( strlen($query) <= 0 ) {
        return array();
    }
    //set parameters to get the requested page
    //$params['rows'] = BHLE_SEARCH_DEFAULT_LIMIT;
    $params['rows'] = BHLE_SEARCH_FACET_LIMIT;
    //$params['start'] = pager_find_page() * BHLE_SEARCH_DEFAULT_LIMIT;
    $params['start'] = 0;

    try {
        // Query solr
        //dpm('query: ' . $query);
        //$query = '(mods_title:flora OR mods_author:darwin OR contentType:book) AND mods_record_content_source:(DLC)';
        $responseObj = $solr->search($query, $params);
        $response = $responseObj->response;
        // Check if we found something
        // ----------------------------------------------
        // configuration of the result list items
        // hard coded by now, could be made nicer ...
        // .., but by now we quickly need a more
        // complete result list

        $title_field_name = "mods_title";
        $content_type_field_name = "contentType";
        // ----------------------------------------------

        $_SESSION['bhle_search']['numFound'] = $response->numFound;
        pager_default_initialize($response->numFound, BHLE_SEARCH_DEFAULT_LIMIT);
        if ($response->numFound > 0) {
            $docs = $response->docs;
            $doc_index = 0;

            // specify rows(docs) to display on page
            $more = $display_start + BHLE_SEARCH_DEFAULT_LIMIT; // just shortener
            $less = $display_start + $response->numFound; // just shortener
            $display_start = pager_find_page() * BHLE_SEARCH_DEFAULT_LIMIT;
            $display_end = $response->numFound < BHLE_SEARCH_DEFAULT_LIMIT ? $less : $more;



            /* PREPARE FACET FOR BLOCK */
            $facet_field_map = bhle_search_facet_field_map(); // TODO: check if simple of advanced
            global $bhle_facet;

            foreach ($docs as $doc) { // prepare for facets
              foreach($facet_field_map as $field_name => $field_label) {
                //$facet_prepare[$field_name]['#title'] = $field_label;
                if (is_array($doc->$field_name)) {
                  foreach ($doc->$field_name as $field_value) {
                    $facet_prepare[$field_name][$field_value]++;
                    //dpm($field_value);
                  }
                } else {
                  $field_value = _solrdoc_getField($doc, $field_name);
                  $facet_prepare[$field_name][$field_value]++;
                }

              }
            }
            foreach($facet_prepare as $field_name => $field_value) {
              arsort($facet_prepare[$field_name]);
              $values = array_slice($facet_prepare[$field_name], 0, 8, TRUE);
              $i = 1;
              foreach($values as $delta => $value) {
                $bhle_facet['fields'][$field_name][$i]['#label'] = $delta;
                $bhle_facet['fields'][$field_name][$i]['#count'] = $value;// TODO: specify number of items in facet
                $bhle_facet['fields'][$field_name]['#title'] = $facet_field_map[$field_name];
                $i++;
              }
              unset($i);
            }
            $_SESSION['bhle_search']['facet']['fields'] = $bhle_facet['fields'];
            /* END PREPARE FACET  */

            for ($i = $display_start; $i < $display_end; ++$i) {
                $doc = $docs[$i];
                $even_odd = $doc_index % 2 == 0 ? 'even' : 'odd';
                $results[$doc_index] = array();
                $contentType = _solrdoc_getField($doc, $content_type_field_name);
                // #attributes.class will be evaluated in bhle_search_preprocess_search_result()
                $results[$doc_index]['#attributes'] = array('class' => array($even_odd, 'content-type-' . $contentType));
                $results[$doc_index]['content_type'] = $contentType;
                $results[$doc_index]['PID'] = _solrdoc_getField($doc, 'PID');
                $results[$doc_index]['extra'] = array();

                $field_map = bhle_search_search_result_field_map_for($contentType);
                foreach ($field_map as $label => $solr_field_name) {
                    if ($solr_field_name == $title_field_name) {
                        $results[$doc_index]['link'] = url('bhle-view/' . $doc->PID);
                        $results[$doc_index]['title'] = _solrdoc_getField($doc, $solr_field_name);
                    } else {
                        //TODO use hook_node_search_result instead
                        $results[$doc_index]['extra'][$label] = _solrdoc_getField($doc, $solr_field_name);
                    }
                }
                $doc_index++;
            }
        }
    } catch (Exception $e) {

    }

    return $results;
}

/**
 * Returns a definition map of metadata fields to be shown for the specific kind of
 * literature item specified by the $type parameter. the return type is an associative array:
 * $label => $solr_field_name
 *
 *
 * @param - $type : allowed values are: unknown, book, journal, journal-article
 */
function bhle_search_search_result_field_map_for($type = 'unknown') {
    switch ($type) {
        case 'unknown':
        case 'journal':
        case 'journal-article':
        case 'book':
            return array(
                // for book:
                "title" => "mods_title",
                "author" => "mods_name",
                "year" => "mods_date_issued",
                "publisher" => "mods_publisher"
            );
    }
}

/**
 * Returns a definition map of metadata fields for facet
 * $label => $solr_field_name
 *
 *
 * @param - $type : allowed values are: simple, advanced
 */
function bhle_search_facet_field_map($type = 'simple') {
    switch ($type) {
        case 'advanced':
            return array(
              "contentType" => t("Material type"),
              "mods_name" => t("Author name"),
              "mods_date_issued" => t("Year"),
              "mods_language" => t("Language"),
              "mods_record_content_source" => t("Content provider"),
              "olef_scientific_name" => t("Scientific name")
            );
        case 'simple':
            return array(
              "contentType" => t("Material type"),
              "mods_name" => t("Author name"),
              "mods_date_issued" => t("Year"),
              "mods_language" => t("Language"),
              "mods_record_content_source" => t("Content provider"),
              "olef_scientific_name" => t("Scientific name")
            );
    }
}

/**
 * Helper function to read fields from solr response doc entities.
 *
 *
 * @param unknown_type $solr_doc
 * @param unknown_type $fieldName
 * @param string $glue
 */
function _solrdoc_getField(&$solr_doc, $fieldName, $glue = ', ') {

    if (isset($solr_doc->$fieldName)) {
        $field = $solr_doc->$fieldName; // the solr response contains an array per field!!!
        if (is_array($field)) {
            return implode($glue, $field); // it can have more than one item!!!
        } else {
            return $field;
        }
    }
}

function _wildcard_save_query_token($query_field, $query_term, $term_in_brackets=false){

    if($term_in_brackets){
        $ob = '(';
        $cb = ')';
    }

    if(_is_wildcard_query($query_term)) {
        $query_token .= '(' ;
        $query_token .= $query_field . ':' . $ob . $query_term . $cb .' OR ' . $query_field . '__exact:' . $ob . $query_term . $cb;
        $query_token .= ')';
    } else {
        $query_token .= $query_field . ':' . $ob . $query_term . $cb;
    }
    return $query_token;
}

function _is_wildcard_query($query_string) {
	return strpos($query_string, "*") !== false || strpos($query_string, "?") !== false;
}

/**
 * Implements hook_menu().
 */
function bhle_search_menu() {
    $items = array();

    $items['admin/config/search/bhle'] = array(
        'title' => 'BHLE Search',
        'description' => 'Configuration for the BHLE search module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bhle_search_config_simple_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/search/bhle/simple'] = array(
        'title' => 'Simple',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bhle_search_config_simple_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/config/search/bhle/advanced'] = array(
        'title' => 'Advanced',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bhle_search_config_advanced_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_LOCAL_TASK,
    );


    return $items;
}

/**
 * Form function, called by drupal_get_form()
 * in bhle_search_menu().
 */
function bhle_search_config_simple_form($form, &$form_state) {
    $form['bhle_search_title_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for TITLE information.'),
        '#default_value' => variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the title information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_author_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for AUTHOR information.'),
        '#default_value' => variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the author information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_year_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for YEAR information.'),
        '#default_value' => variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the year information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_scientific_name_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for SCIENTIFIC NAME information.'),
        '#default_value' => variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which contains the scientific name information.'),
        '#required' => TRUE,
    );

    $form['bhle_search_common_name_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr index field for COMMON NAME expansion triggering.'),
        '#default_value' => variable_get('bhle_search_common_name_field', BHLE_SEARCH_COMMON_NAME_FIELD),
        '#size' => 15,
        '#description' => t('Set the Apache Solr index field which will be used to trigger the common name expansion (contains scientific names).'),
        '#required' => TRUE,
    );

    $form['bhle_search_fields'] = array(
        '#type' => 'textfield',
        '#title' => t('Apache Solr other searchable fields.'),
        '#default_value' => variable_get('bhle_search_fields', BHLE_SEARCH_FIELDS),
        '#size' => 15,
        '#description' => t('Semi-colon separated list with names of other fields searchable via Solr.'),
        '#required' => TRUE,
    );

    // Load all environments from the apachesolr module and list them in our settings
    $environments = apachesolr_load_all_environments();
    $options = array();
    foreach ($environments as $id => $environment) {
        $options[$id] = $environment['name'];
    }
    $form['bhle_search_solr_core'] = array(
        '#type' => 'select',
        '#title' => t('Apache Solr core to use for querying.'),
        '#default_value' => variable_get('bhle_search_solr_core', 'solr'),
        '#description' => t('Set the Apache Solr core which is used for executing a query.'),
        '#required' => TRUE,
        '#options' => $options,
    );

    return system_settings_form($form);
}

function field_name_label($field_name){
	static $field_name_label_map;

	if(!isset($field_name_label_map)){
		$field_name_label_map = array("date_issued"=>'Year', 'name'=>'Author');
	}

	$label = substr($field_name, strpos($field_name, '_') + 1);
	if(isset($field_name_label_map[$label])){
		return t($field_name_label_map[$label]);
	} else {
		$label = str_replace('_', ' ', $label);
		return ucfirst($label);
	}
}

/**
 * Form function, called by drupal_get_form()
 * in bhle_search_menu().
 */
function bhle_search_config_advanced_form($form, &$form_state) {
    return system_settings_form($form);
}

/**
 * Additional preprocessor to template_preprocess_search_result(&$variables)
 *
 * see http://drupal.org/node/223430
 */
function bhle_search_preprocess_search_result(&$variables) {


    $additional_classes = $variables['result']['#attributes']['class'];
    $variables['content_type'] = $variables['result']['content_type'];
    $variables['PID'] = $variables['result']['PID'];

    foreach ($additional_classes as $class) {
        $variables['classes_array'][] = $class;
    }

    foreach (array_keys($variables['result']['extra']) as $key) {
        $variables['result']['extra'][$key] = check_plain($variables['result']['extra'][$key]);
    }
}

/**
 * Implements hook_theme().
 */
function bhle_search_theme() {
    return array(
        'search_summary' => array(
            'variables' => array(
                'number_of_results' => null,
                'matches_for' => null,
                'module' => null
            ),
            'template' => 'search_summary'
        )
    );
}

/**
 * Implements hook hook_block_info()
 *
 */
function bhle_search_block_info() {

    $blocks['search_summary'] = array(
        'info' => t('Search summary'),
        'cache' => DRUPAL_NO_CACHE,
    );
    $blocks['bhle_search'] = array(
        'info' => t('BHL-E search'),
        'cache' => DRUPAL_NO_CACHE,
    );
    $blocks['simple_facet'] = array(
        'info' => t('BHL-E Facet list simple'),
        'cache' => DRUPAL_NO_CACHE,
    );
    $blocks['advanced_facet'] = array(
        'info' => t('BHL-E Facet list advanced'),
        'cache' => DRUPAL_NO_CACHE,
    );
    return $blocks;
}

/**
 * Implements hook_block_view()
 *
 *  - 'delta' : Which block to render. This is a unique identifier for the block within the module, defined in hook_block_info().
 */
function bhle_search_block_view($delta = '') {

    $block = array();

    switch ($delta) {
        case 'bhle_search':
          $block['subject'] = null; // Most forms don't have a subject
          $block['content'] = drupal_get_form('search_form');
          break;
        case 'search_summary':
            bhle_search_search_summary_add_hit_count();
            $search_summary = bhle_search_search_summary_add();

            $block['subject'] = t('Search summary');
            $block['content'] = array(
                '#theme' => 'search_summary'
            );
            $block['content']['#number_of_results'] = array(
                'label' => t('Number of results'),
                'value' => $_SESSION['bhle_search']['numFound']
            );

            if (count($search_summary) > 0) {
                $block['content']['#matches_for'] = array(
                    'label' => t('Matches for'),
                    'search_summary' => $search_summary
                );
            }
            break;

        case 'simple_facet':
          global $bhle_facet;
          $block['subject'] = t('Facet list');
          $block['content']['#type'] = 'markup';
          $block['content']['#markup'] = '';
          if(is_array($bhle_facet)) {
            $block['content']['#markup'] .= '<p id="facet-list-grip-multiple" class="collapsing-multiple-grip">' . t('Collapse / expand all') . '</p>';
            $block['content']['#markup'] .= '<div class="facet-list collapsing-multiple">';
            foreach($bhle_facet['fields'] as $field_name => $field) {
              $block['content']['#markup'] .= '<div class="facet-item"><h3 class="collapsing-grip"><a href="#">' . $field['#title'] . '</a></h3>';
              $block['content']['#markup'] .= '<ul class="collapsing-content">';
              foreach($field as $key => $val) {
                if (is_numeric($key)) {
                  $source = 'simple';
                  if(!$val['#label']) {
                    $params = array('query' => array('action' => 'addfacet', 'field' => $field_name, 'key' => $key, 'source' => $source, 'last' => md5(time())));
                    $block['content']['#markup'] .= '<li><span class="value">' . t('Not set') . ':' . ' ' . $val['#count'] . '</span></li>'; // TODO: use theme_list
                  } else {
                    $params = array('query' => array('action' => 'addfacet', 'field' => $field_name, 'key' => $key, 'source' => $source, 'last' => md5(time())));
                    $block['content']['#markup'] .= '<li>' . l($val['#label'] . ':', 'search/bhle/empty', $params) . ' <span class="value">' . $val['#count'] . '</span></li>'; // TODO: use theme_list
                  }
                  unset($delete);
                }
              }
              $block['content']['#markup'] .= '</ul></div>';
            }
            $block['content']['#markup'] .= '</div>';
          }
          break;
        case 'advanced_facet':
          global $bhle_facet;
          $block['subject'] = t('Facet list');
          $block['content']['#type'] = 'markup';
          $block['content']['#markup'] = '';
          if(is_array($bhle_facet)) {
            $block['content']['#markup'] .= '<p id="facet-list-grip-multiple" class="collapsing-multiple-grip">' . t('Collapse / expand all') . '</p>';
            $block['content']['#markup'] .= '<div class="facet-list collapsing-multiple">';
            foreach($bhle_facet['fields'] as $field_name => $field) {
              $block['content']['#markup'] .= '<div class="facet-item"><h3 class="collapsing-grip"><a href="#">' . $field['#title'] . '</a></h3>';
              $block['content']['#markup'] .= '<ul class="collapsing-content">';
              foreach($field as $key => $val) {
                if (is_numeric($key)) {
                  $source = 'advanced';
                  foreach($_SESSION['bhle_search']['conditions'] as $condition) {
                    if ($condition['field'] == $field_name &&
                         ($condition['term'] == $val['#label'] || bhle_search_solr_escape($condition['term']) == $val['#label'] || $condition['term'] == bhle_search_solr_escape($val['#label']))
                       ) {
                      $delete = TRUE;
                    }
                  }
                  if($delete) {
                    $params = array('query' => array('action' => 'removefacet', 'field' => $field_name, 'key' => $key, 'source' => $source, 'last' => md5(time())));
                    $block['content']['#markup'] .= '<li>' . l(t('REMOVE:'), 'search/bhle/empty', $params) . ' <span class="value">' . $val['#label'] . '</span></li>';
                  } elseif(!$val['#label']) {
                    $params = array('query' => array('action' => 'addfacet', 'field' => $field_name, 'key' => $key, 'source' => $source, 'last' => md5(time())));
                    $block['content']['#markup'] .= '<li><span class="value">' . t('Not set') . ':' . ' ' . $val['#count'] . '</span></li>'; // TODO: use theme_list
                  } else {
                    $params = array('query' => array('action' => 'addfacet', 'field' => $field_name, 'key' => $key, 'source' => $source, 'last' => md5(time())));
                    $block['content']['#markup'] .= '<li>' . l($val['#label'] . ':', 'search/bhle/empty', $params) . ' <span class="value">' . $val['#count'] . '</span></li>'; // TODO: use theme_list
                  }
                  unset($delete);
                }
              }
              $block['content']['#markup'] .= '</ul></div>';
            }
            $block['content']['#markup'] .= '</div>';
          }
          break;
    }

    return $block;
}

function bhle_search_search_summary_add($condition = null, $query = null) {
    global $_search_summary;
    if (!isset($_search_summary)) {
        $_search_summary = array();
    }
    if ($condition != null && $query != null) {
        $_search_summary[] = array('condition' => $condition, 'query' => bhle_search_solr_escape($query));
    }

    return $_search_summary;
}

function bhle_search_search_summary_update($index, $condition = null, $query = null) {
    global $_search_summary;

    if ($condition != null) {
        $_search_summary[$index]['condition'] = $condition;
    }

    if ($query != null) {
        $_search_summary[$index]['query'] = $query;
    }

    return $_search_summary;
}

/**
 * Query solr for hit count per query condition by making use of
 * a facet query, the count is added to search_summary which can be
 * get by calling bhle_search_search_summary_add() without parameters.
 *
 * @param - $conditions
 */
function bhle_search_search_summary_add_hit_count() {

    $search_summary = bhle_search_search_summary_add();
    //dpm($search_summary);
    if (count($search_summary) > 0) {
        $solr = apachesolr_get_solr(variable_get('bhle_search_solr_core'));
        $query = '*';
        $results = array();
        $params = array('facet' => 'true', 'facet.query' => array());
        foreach ($search_summary as $summary_element) {
            $query_item = $summary_element['query'];
            if (trim($query_item['query_term'])) { // check for empty term

             if($query_item['query_field'] == 'simple') {

                foreach($_SESSION['bhle_search']['simple_condition']['fields'] as $delta => $value) {
                  if($value == 1) {
                    switch ($delta) {
                      case 'title':
                        if($in_query) { $q .= ' OR '; }
                        $q .= variable_get('bhle_search_title_field', BHLE_SEARCH_TITLE_FIELD) . ':' . $query_item['query_term'] . '';
                        $in_query = 1;
                        break;
                      case 'author':
                        if($in_query) { $q .= ' OR '; }
                        $q .= variable_get('bhle_search_author_field', BHLE_SEARCH_AUTHOR_FIELD) . ':' . $query_item['query_term'] . '';
                        $in_query = 1;
                        break;
                      case 'year':
                        if($in_query) { $q .= ' OR '; }
                        $q .= variable_get('bhle_search_year_field', BHLE_SEARCH_YEAR_FIELD) . ':' . $query_item['query_term'] . '';
                        $in_query = 1;
                        break;
                      case 'scientific_name':
                        if($in_query) { $q .= ' OR '; }
                        $q .= variable_get('bhle_search_scientific_name_field', BHLE_SEARCH_SCIENTIFIC_NAME_FIELD) . ':' . $query_item['query_term'] . '';
                        $in_query = 1;
                        break;
                    }
                  }
                }

                //dpm($q);
                //$params['facet.query'][] = 'mods_date_issued:1901 OR mods_date_issued:1900';
                $params['facet.query'][] = $q;
              } else {
                $params['facet.query'][] = _wildcard_save_query_token($query_item['query_field'], ($query_item['query_term'] ? $query_item['query_term'] : '""'));
              }
            }
        }
        // Query solr for facet query
        // like ?q=*&facet=true&facet.query=mods_title__exact:"le continent mysterieux"&facet.query=mods_name:Morton
        $responseObj = $solr->search($query, $params);
        //dpm($query);
        //dpm($params);
        $facet_queries = $responseObj->facet_counts->facet_queries;

        foreach ($search_summary as $i => $summary_element) {
            $condition = $summary_element['condition'];
            $query_item = $summary_element['query'];
            if (trim($query_item['query_term'])) { // check for empty term; compare with above
                $facet_result = $facet_queries->$params['facet.query'][$i];
                $condition['count'] = $facet_result;
            }
            bhle_search_search_summary_update($i, $condition);
        }
    }
}

/**
 * Process variables for search_summary.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $number_of_results
 * - $matches_for
 *
 * @see search_summary.tpl.php
 */
function template_preprocess_search_summary(&$variables) {
    if (isset($variables['matches_for']['search_summary'])) {

        // copy conditions
        $search_summary = $variables['matches_for']['search_summary'];
        // empty original
        $variables['matches_for']['search_summary'] = array();

        foreach ($search_summary as $i => $summary_element) {

            $condition = $summary_element['condition'];

            $condition['term'] = check_plain($condition['term']);
            if ($condition['exact_phrase']) {
                $condition['term'] = '"' . $condition['term'] . '"';
            }

            $condition['field_label'] = field_name_label($condition['field']);

            $variables['matches_for']['info'][$i] = $condition;

            $entered_term = $condition['term'];
            $expanded_term = $summary_element['query']['query_term'];
            if ($expanded_term !== $entered_term)  {
                $variables['matches_for']['info'][$i]['term_expanded'] = check_plain($expanded_term);
            }
        }
    }
}