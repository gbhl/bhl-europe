<?php

class DummySolr {
  function getId() {
    return __CLASS__;
  }

  function getFields() {
    return (object) array(
       'is_uid' =>
      (object) array(
         'type' => 'long',
         'schema' => 'I-S----OF-----',
      ),
       'content' =>
      (object) array(
         'type' => 'text',
         'schema' => 'ITS-V---------',
      ),
       'im_3_field_tags' =>
      (object) array(
         'type' => 'long',
         'schema' => 'I-SM---OF-----',
         'dynamicBase' => 'im_*',
      ),
       'entity_type' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'ds_last_comment_or_change' =>
      (object) array(
         'type' => 'tdate',
         'schema' => 'ITS----OF-----',
      ),
       'nodeaccess_ari4jj_node_access_example_view' =>
      (object) array(
         'type' => 'integer',
         'schema' => 'I--M---OF-----',
         'dynamicBase' => 'nodeaccess*',
      ),
       'entity_id' =>
      (object) array(
         'type' => 'tlong',
         'schema' => 'ITS----OF-----',
      ),
       'ds_changed' =>
      (object) array(
         'type' => 'tdate',
         'schema' => 'ITS----OF-----',
      ),
       'id' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'timestamp' =>
      (object) array(
         'type' => 'date',
         'schema' => 'I-S----OF----l',
      ),
       'label' =>
      (object) array(
         'type' => 'text',
         'schema' => 'ITS-V--O------',
      ),
       'nodeaccess_ari4jj_node_access_example_edit' =>
      (object) array(
         'type' => 'integer',
         'schema' => 'I--M---OF-----',
         'dynamicBase' => 'nodeaccess*',
      ),
       'ds_created' =>
      (object) array(
         'type' => 'tdate',
         'schema' => 'ITS----OF-----',
      ),
       'ss_name' =>
      (object) array(
         'type' => 'text',
         'schema' => 'ITS-V---------',
      ),
       'path' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'taxonomy_names' =>
      (object) array(
         'type' => 'text',
         'schema' => 'IT-MV--O------',
      ),
       'bundle' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'tid' =>
      (object) array(
         'type' => 'long',
         'schema' => 'I-SM---OF-----',
      ),
       'is_tnid' =>
      (object) array(
         'type' => 'long',
         'schema' => 'I-S----OF-----',
      ),
       'nodeaccess_ari4jj_node_access_example_author' =>
      (object) array(
         'type' => 'integer',
         'schema' => 'I--M---OF-----',
         'dynamicBase' => 'nodeaccess*',
      ),
       'tm_vid_1_names' =>
      (object) array(
         'type' => 'text',
         'schema' => 'ITSMV---------',
         'dynamicBase' => 'tm_*',
      ),
       'spell' =>
      (object) array(
         'type' => 'textSpell',
         'schema' => 'ITSM----------',
      ),
       'site' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'is_comment_count' =>
      (object) array(
         'type' => 'tint',
         'schema' => 'ITS----OF-----',
      ),
       'bundle_name' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'hash' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'bs_status' =>
      (object) array(
         'type' => 'boolean',
         'schema' => 'I-S----OF----l',
      ),
       'entity_id' =>
      (object) array(
         'type' => 'long',
         'schema' => 'I-S----OF-----',
      ),
       'url' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'nodeaccess_all' =>
      (object) array(
         'type' => 'integer',
         'schema' => 'I--M---OF-----',
         'dynamicBase' => 'nodeaccess*',
      ),
       'sort_name' =>
      (object) array(
         'type' => 'sortString',
         'schema' => 'IT-----O-----l',
      ),
       'tags_a' =>
      (object) array(
         'type' => 'text',
         'schema' => 'IT-----O------',
         'dynamicBase' => 'tags_*',
      ),
       'bs_sticky' =>
      (object) array(
         'type' => 'boolean',
         'schema' => 'I-S----OF----l',
      ),
       'bs_promote' =>
      (object) array(
         'type' => 'boolean',
         'schema' => 'I-S----OF----l',
      ),
       'teaser' =>
      (object) array(
         'type' => 'text',
         'schema' => '-TS-----------',
      ),
       'im_vid_1' =>
      (object) array(
         'type' => 'long',
         'schema' => 'I-SM---OF-----',
         'dynamicBase' => 'im_*',
      ),
       'bs_translate' =>
      (object) array(
         'type' => 'boolean',
         'schema' => 'I-S----OF----l',
      ),
       'sort_label' =>
      (object) array(
         'type' => 'sortString',
         'schema' => 'IT-----O-----l',
      ),
       'ss_language' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-S----OF----l',
      ),
       'sm_vid_Tags' =>
      (object) array(
         'type' => 'string',
         'schema' => 'I-SM---OF----l',
         'dynamicBase' => 'sm_*',
      ),
    );
  }
}

/**
 * Unit tests for query object methods.
 */
class SolrBaseQueryTests extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Query object base functionality',
      'description' => 'Tests query object methods individually.',
      'group' => 'ApacheSolr',
    );
  }

  protected function setUp() {
    parent::setUp();
    require_once dirname(dirname(__FILE__)) . '/Solr_Base_Query.php';
  }

  /**
   * Test ordering of parsed filter positions.
   *
   * Regression test for http://drupal.org/node/891962
   */
  function testParseFilters() {
    $fq = array('tid:3', 'sort_label:hello', 'tid:11', 'tid:1', 'tid:12', 'label:hello');
    // Setup dummy Solr object.
    $query = new SolrBaseQuery("apachesolr_tests", new DummySolr(), array('q' => 'mykeys', 'fq' => $fq), '', '');
    $this->assertFalse($query->hasFilter('label', 'Hello'));
    $this->assertTrue($query->hasFilter('label', 'hello'));
    $filters = $query->getFilters();
    $this->assertEqual(count($filters), 6, count($filters) . ' filters found, expected 6 filters');
    // Check positions of filters
    foreach ($fq as $idx => $filter) {
      $this->assertEqual($filter, $query->makeFilterQuery($filters[$idx]));
    }
    // Check that the query string is re-assembled correctly
    $this->assertEqual(array('fq' => $fq), $query->getUrlQueryvalues(array('fq' => array())));
    $this->assertEqual('mykeys', $query->getParam('q'));
    $query->removeFilter('tid', '11');
    $filters = $query->getFilters();
    $this->assertEqual(count($filters), 5, count($filters) . ' filters found, expected 5 filters');
    $this->assertEqual(array('fq' => array('tid:3', 'sort_label:hello', 'tid:1', 'tid:12', 'label:hello')), $query->getUrlQueryvalues(array('fq' => array())));
    $query->removeFilter('tid');
    $filters = $query->getFilters();
    $this->assertEqual(count($filters), 2, count($filters) . ' filters found, expected 2 filters');
    $this->assertEqual(array('sort_label:hello', 'label:hello'), $query->getParam('fq'));

    $subquery = new SolrFilterSubQuery();
    $subquery->addFilter('access__all', 0);
    $subquery->addFilter('hash', apachesolr_site_hash());
    $query->addFilterSubQuery($subquery);
    $this->assertEqual(count($query->getParam('fq')), 3, count($query->getParam('fq')) . ' fq params found, expected 3 after adding subquery');
    $this->assertEqual(array('sort_label:hello', 'label:hello', '(access__all:0 OR hash:'. apachesolr_site_hash() .')'), $query->getParam('fq'));
  }
}

