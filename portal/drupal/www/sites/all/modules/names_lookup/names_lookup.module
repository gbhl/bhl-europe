<?php
// TEST CODE BELOW (for running in e.g. Drupal Debug)
//$start = microtime( true );
//var_dump( names_lookup_common_name( "Eurasian Spoonbill" ) );
//$end = microtime( true );
//
//echo "Timing (s): " . ($end - $start);
// END TEST CODE

define( 'BHLE_NAMES_LOOKUP_COL_ANNUAL', 'http://www.catalogueoflife.org/annual-checklist/col/' );
define( 'BHLE_NAMES_LOOKUP_COL_DYNAMICALLY', 'http://webservice.catalogueoflife.org/' );
define( 'BHLE_NAMES_LOOKUP_PESI', 'http://www.eu-nomen.eu/portal/soap.php?wsdl=1' );

/**
 * PUBLIC INTERFACE FUNCTIONS START
 */

/**
 * Query CoL and PESI webservice for scientific name for a given common name
 * @param string $common_name Common name to search for (wildcards - * or % - allowed)
 * @return array List of scientific names for a given common name, false on error
 */
function names_lookup_common_name( $common_name ) {
    $col_names = names_lookup_common_name_col($common_name);
    $pesi_names = names_lookup_common_name_pesi($common_name);
    
    // If both requests failed, return false
    if( $col_names == false && $pesi_names == false ) {
        return false;
    }
    
    // Override result for flawless merging
    if( $col_names == false ) $col_names = array();
    if( $pesi_names == false ) $pesi_names = array();
    
    $common_names = array_merge($col_names, $pesi_names);
    
    // Now remove duplicates
    foreach( $common_names as $key => $name_data ) {
        foreach( $common_names as $sub_key => $sub_data ) {
            if( $key == $sub_key ) continue;
            
            if( $sub_data["name"] == $name_data["name"] && isset($common_names[$key]) ) {
                $common_names[$key]["source"] = array_unique( array_merge( $common_names[$key]["source"], $sub_data["source"] ) );
                unset( $common_names[$sub_key] );
            }
        }
    }
    
    return $common_names;
}

/**
 * Query the CoL webservice for accepted name for a given common-name
 * @param string $common_name Common name to search for (wildcards - * or % - allowed)
 * @return array Array containing a list of accepted names, false on error
 */
function names_lookup_common_name_col( $common_name ) {
    // Replace any "*" by "%" since CoL's webservice can handle both and this optimizes the caching
    $common_name = str_replace( "*", "%", $common_name );
    $accepted_names = array();
    
    $col_base = variable_get( 'names_lookup_col_webservice_instance', BHLE_NAMES_LOOKUP_COL_DYNAMICALLY ) . 'webservice?response=full&format=php&name=';
    
    // Send the request to the webserver
    $response = _names_lookup_webservice_request( $common_name, $col_base . urlencode($common_name) );
    // Check for a valid response
    if( $response != "" ) {
        $response_data = unserialize( $response );
        
        // Check if we received something senseful
        if( $response_data === false ) {
            return;
        }
        
        // Get the results
        if( !isset( $response_data["results"] ) ) return false;
        $results = $response_data["results"];
        
        // Cycle through results
        foreach( $results as $result ) {
            // Check if we have a common name
            if( $result["name_status"] != "common name" ) continue;
            // Check for accepted name
            if( !isset($result["accepted_name"]) || !is_array($result["accepted_name"]) ) continue;
            
            // Finally get the accepted names
            $accepted_names[] = array( "name" => $result["accepted_name"]["name"], "source" => array( $result["accepted_name"]["source_database"] . " (" . $result["accepted_name"]["url"] . ")" ) );
        }
        
        // Return any found accepted names
        return $accepted_names;
    }
    
    return false;
}

/**
 * Query the PESI Soap Webservice for scientific name for a given common name
 * @param string $common_name Common name to search for (wildcards - * or % - allowed)
 * @return array  Array containing a list of scientific names, false on error
 */
function names_lookup_common_name_pesi( $common_name ) {
    // Replace any "*" by "%" since PESI's webservice can only handle those
    $common_name = str_replace( "*", "%", $common_name );
    $common_names = array();
    
    // Check for the soap extension
    if( !extension_loaded("soap") ) {
        return false;
    }
    
    $response = _names_lookup_soap_cache("getPESIRecordsByVernacular", $common_name);
    
    // Check if request went okay
    if( !is_array($response) ) {
        return false;
    }
    
    // Parse the result
    foreach( $response as $entry ) {
        $common_names[] = array( "name" => $entry->scientificname, "source" => explode( ' | ', $entry->citation) );
    }
    
    return $common_names;
}

/**
 * Query webservices for synonyms of a given scientific name
 * @param string $scientific_name Scientific name to look for
 * @return array List of synonyms and their sources, false on error
 */
function names_lookup_synonyms( $scientific_name ) {
    return names_lookup_synonyms_col($scientific_name);
}

/**
 * Query the CoL for a given scientific-name and return all synonyms for it
 * @param string $scientific_name Scientific name to look for
 * @return array List of synonyms and their sources, false on error
 */
function names_lookup_synonyms_col( $scientific_name ) {
    // Replace any "*" by "%" since CoL's webservice can handle both and this optimizes the caching
    $scientific_name = str_replace( "*", "%", $scientific_name );
    $synonym_names = array();
    
    $col_base = variable_get( 'names_lookup_col_webservice_instance', BHLE_NAMES_LOOKUP_COL_DYNAMICALLY ) . 'webservice?response=full&format=php&name=';
    
    // Send the request to the webserver
    $response = _names_lookup_webservice_request( $scientific_name, $col_base . urlencode($scientific_name) );
    // Check for a valid response
    if( $response != "" ) {
        $response_data = unserialize( $response );
        
        // Check if we received something senseful
        if( $response_data === false ) {
            return;
        }
        
        // Get the results
        if( !isset( $response_data["results"] ) ) return false;
        $results = $response_data["results"];
        
        // Cycle through results
        foreach( $results as $result ) {
            // Check if we have synonyms
            if( !is_array( $result["synonyms"] ) ) continue;
            foreach( $result["synonyms"] as $synonym ) {
                if( !is_array($synonym) || !isset( $synonym["name"] ) ) continue;

                // Store our synonym
                $synonym_names[] = array( "name" => $synonym["name"], "source" => array( $result["source_database"] . " (" . $result["url"] . ")" ) );
            }
        }
        
        // Return any found synonyms
        return $synonym_names;
    }
    
    return false;
}

/**
 * Lookup the accepted name for a given scientific name, returns the passed name if it is already accepted
 * @param string $scientific_name Scientific name to look for
 */
function names_lookup_accepted_pesi( $scientific_name ) {
    $accepted_name = array();
    
    $response = _names_lookup_soap_cache("getPESIRecords", $scientific_name);
}

function names_lookup_accepted_col( $scientific_name ) {
    // Replace any "*" by "%" since CoL's webservice can handle both and this optimizes the caching
    $scientific_name = str_replace( "*", "%", $scientific_name );
    $synonym_names = array();
    
    $col_base = variable_get( 'names_lookup_col_webservice_instance', BHLE_NAMES_LOOKUP_COL_DYNAMICALLY ) . 'webservice?response=full&format=php&name=';
    
    // Send the request to the webserver
    $response = _names_lookup_webservice_request( $scientific_name, $col_base . urlencode($scientific_name) );
    // Check for a valid response
    if( $response != "" ) {
        $response_data = unserialize( $response );
        
        // Check if we received something senseful
        if( $response_data === false ) {
            return;
        }
        
        // Get the results
        if( !isset( $response_data["results"] ) ) return false;
        $results = $response_data["results"];
        
        // Cycle through results
        foreach( $results as $result ) {
            // Check if this is a synonym
            if( isset($result['sn_id']) ) {
                $sn_id = intval($result['sn_id']);
                
                // Check for a valid synonym-id
                if( $sn_id <= 0 ) continue;
                
                $col_base = variable_get( 'names_lookup_col_webservice_instance', BHLE_NAMES_LOOKUP_COL_DYNAMICALLY ) . 'webservice?response=full&format=php&id=';
                $response = _names_lookup_webservice_request( $sn_id, $col_base . urlencode($sn_id) );
            }
        }
        
        // Return any found synonyms
        return $synonym_names;
    }
    
    return false;
}

/**
 * PUBLIC INTERFACE FUNCTIONS END
 * Note: do not call any functions below here
 */

/**
 * INTERNAL FUNCTIONS START
 */

/**
 * Run a webservice request (using caching)
 * @param string $term Arbitrary string, used for caching
 * @param string $url web-service address
 * @return string Web-service response 
 */
function _names_lookup_webservice_request($term, $url) {
    $response = "";

    // Check for a cached result
    $cache_result = cache_get($term, 'cache_names_col');
    if ($cache_result != false) {
        $response = $cache_result->data;
    } else {
        $response = file_get_contents($url);

        // Cache the result
        cache_set($term, $response, 'cache_names_col', time() + 86400 * variable_get('names_lookup_cache_time', 1) );
    }

    return $response;
}

/**
 * Run a soap request (against PESI for now) and cache its result
 * @param string $function_name Name of SOAP function to call
 * @param mixed $parameter Parameter to send to function
 * @return mixed Response of function call (null on error)
 */
function _names_lookup_soap_cache( $function_name, $parameter ) {
    $response = null;
    $cache_name = serialize( array( "function" => $function_name, "parameter" => $parameter ) );

    // Check for a cached result
    $cache_result = cache_get($cache_name, 'cache_names_pesi');
    if ($cache_result != false) {
        $response = unserialize($cache_result->data);
    } else {
        try {
            $soapClient = new SoapClient( BHLE_NAMES_LOOKUP_PESI );
            $response = $soapClient->$function_name( $parameter );

            // Cache the result
            cache_set($cache_name, serialize($response), 'cache_names_pesi', time() + 86400 * variable_get('names_lookup_cache_time', 1) );
        }
        catch( Exception $e ) {
        }
    }

    return $response;
}


/**
 * INTERNAL FUNCTIONS END
 */

/**
 * DRUPAL HOOK FUNCTIONS START
 */

/**
 * Implements caching functionality
 * @return array 
 */
function names_lookup_flush_caches() {
    return array('cache_names_col', 'cache_names_pesi');
}

/**
 * Implements hook_menu().
 */
function names_lookup_menu() {
    $items = array();

    $items['admin/config/search/names_lookup'] = array(
        'title' => 'Names Lookup',
        'description' => 'Configuration for the Names Lookup module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('names_lookup_config_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * Form function, called by drupal_get_form() 
 * in names_lookup_menu().
 */
function names_lookup_config_form($form, &$form_state) {
    $form['names_lookup_cache_time'] = array(
        '#type' => 'textfield',
        '#title' => t('Time to cache (days)'),
        '#default_value' => variable_get('names_lookup_cache_time', 1),
        '#size' => 3,
        '#maxlength' => 3,
        '#description' => t('The maximum age of a cached entry.'),
        '#required' => TRUE,
    );

    $form['names_lookup_col_webservice_instance'] = array(
        '#type' => 'select',
        '#title' => t('Select the CoL webservice instance you would like to use'),
        '#default_value' => "",
        '#description' => t('Select one of the two CoL webservice instances you would like to use for querying.'),
        '#required' => TRUE,
        '#options' => array(
            BHLE_NAMES_LOOKUP_COL_DYNAMICALLY => t( 'dynamically updated edition' ),
            BHLE_NAMES_LOOKUP_COL_ANNUAL => t( 'annual checklist service' ),
        ),
        '#default_value' => variable_get( 'names_lookup_col_webservice_instance', BHLE_NAMES_LOOKUP_COL_DYNAMICALLY ),
    );

    $form['names_lookup_sample_query'] = array(
        '#type' => 'textfield',
        '#title' => t('Enter a common name to sample query CoL and PESI for'),
        '#default_value' => "",
        '#size' => 15,
        '#description' => t('This field allows to test the Names module by issuing a sample query. The result will be displayed as error message upon saving the configuration (names are separated by semi-colons).'),
        '#required' => FALSE,
    );

    $form['names_lookup_synonyms_sample_query'] = array(
        '#type' => 'textfield',
        '#title' => t('Enter a scientific name to receive synonyms for'),
        '#default_value' => "",
        '#size' => 15,
        '#description' => t('This field allows to test the Names module by issuing a sample query. The result will be displayed as error message upon saving the configuration (names are separated by semi-colons).'),
        '#required' => FALSE,
    );

    return system_settings_form($form);
}

/**
 * Implements validation provided by the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function names_lookup_config_form_validate($form, &$form_state) {
    $max_num = $form_state['values']['names_lookup_cache_time'];
    if (!is_numeric($max_num)) {
        form_set_error('names_lookup_cache_time', t('You must enter an integer for the maximum age.'));
    } else if ($max_num <= 0) {
        form_set_error('names_lookup_cache_time', t('Maximum age must be positive.'));
    }

    $sample_name = trim( $form_state['values']['names_lookup_sample_query'] );
    if( !empty($sample_name) ) {
        $scientificnames = names_lookup_common_name($sample_name);
        if( $scientificnames === false ) {
            form_set_error('names_lookup_sample_query', t('Unable to call the webservice.'));
        }
        else {
            $names = array();
            foreach( $scientificnames as $scientificname ) {
                $names[] = $scientificname['name'];
            }
            
            form_set_error('names_lookup_sample_query', t('Result: ' . join( '; ', $names ) ));
        }
    }

    $sample_name = trim( $form_state['values']['names_lookup_synonyms_sample_query'] );
    if( !empty($sample_name) ) {
        $synonyms = names_lookup_synonyms($sample_name);
        if( $synonyms === false ) {
            form_set_error('names_lookup_synonyms_sample_query', t('Error while calling the webservice.'));
        }
        else {
            $names = array();
            foreach( $synonyms as $synonym ) {
                $names[] = $synonym['name'];
            }
            
            form_set_error('names_lookup_synonyms_sample_query', t('Result: ' . join( '; ', $names ) ));
        }
    }

}

/**
 * DRUPAL HOOK FUNCTIONS END
 */
