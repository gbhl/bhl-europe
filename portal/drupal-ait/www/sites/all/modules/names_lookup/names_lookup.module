<?php
// START TEST CODE
//var_dump( names_lookup_common_name_pesi( "Eurasian Spoonbill" ) );
// END TEST CODE

/**
 * Query CoL and PESI webservice for scientific name for a given common name
 * @param string $common_name Common name to search for (wildcards - * or % - allowed)
 * @return array List of scientific names for a given common name, false on error
 */
function names_lookup_common_name( $common_name ) {
    $col_names = names_lookup_common_name_col($common_name);
    $pesi_names = names_lookup_common_name_pesi($common_name);
    
    // If both requests failed, return false
    if( $col_names == false && $pesi_names == false ) {
        return false;
    }
    
    // Override result for flawless merging
    if( $col_names == false ) $col_names = array();
    if( $pesi_names == false ) $pesi_names = array();
    
    $common_names = array_merge($col_names, $pesi_names);
    
    // Now remove duplicates
    foreach( $common_names as $key => $name_data ) {
        foreach( $common_names as $sub_key => $sub_data ) {
            if( $key == $sub_key ) continue;
            
            if( $sub_data["name"] == $name_data["name"] && isset($common_names[$key]) ) {
                $common_names[$key]["source"] = array_unique( array_merge( $common_names[$key]["source"], $sub_data["source"] ) );
                unset( $common_names[$sub_key] );
            }
        }
    }
    
    return $common_names;
}

/**
 * Query the CoL webservice for accepted name for a given common-name
 * @param string $common_name Common name to search for (wildcards - * or % - allowed)
 * @return array Array containing a list of accepted names, false on error
 */
function names_lookup_common_name_col( $common_name ) {
    // Replace any "*" by "%" since CoL's webservice can handle both and this optimizes the caching
    $common_name = str_replace( "*", "%", $common_name );
    $accepted_names = array();
    
    $col_base = "http://www.catalogueoflife.org/col/webservice?response=full&format=php&name=";
    
    // Send the request to the webserver
    $response = _names_lookup_webservice_request( $common_name, $col_base . urlencode($common_name) );
    // Check for a valid response
    if( $response != "" ) {
        $response_data = unserialize( $response );
        
        // Check if we received something senseful
        if( $response_data === false ) {
            return;
        }
        
        // Get the results
        if( !isset( $response_data["results"] ) ) return false;
        $results = $response_data["results"];
        
        // Cycle through results
        foreach( $results as $result ) {
            // Check if we have a common name
            if( $result["name_status"] != "common name" ) continue;
            // Check for accepted name
            if( !isset($result["accepted_name"]) || !is_array($result["accepted_name"]) ) continue;
            
            // Finally get the accepted names
            $accepted_names[] = array( "name" => $result["accepted_name"]["name"], "source" => array( $result["accepted_name"]["source_database"] . " (" . $result["accepted_name"]["url"] . ")" ) );
        }
        
        // Return any found accepted names
        return $accepted_names;
    }
    
    return false;
}

/**
 * Query the PESI Soap Webservice for scientific name for a given common name
 * @param string $common_name Common name to search for (wildcards - * or % - allowed)
 * @return array  Array containing a list of scientific names, false on error
 */
function names_lookup_common_name_pesi( $common_name ) {
    // Replace any "*" by "%" since PESI's webservice can only handle those
    $common_name = str_replace( "*", "%", $common_name );
    $common_names = array();
    
    // Check for the soap extension
    if( !extension_loaded("soap") ) {
        return false;
    }
    
    $response = _names_lookup_soap_cache("getPESIRecordsByVernacular", $common_name);
    
    // Check if request went okay
    if( !is_array($response) ) {
        return false;
    }
    
    // Parse the result
    foreach( $response as $entry ) {
        $common_names[] = array( "name" => $entry->scientificname, "source" => explode( ' | ', $entry->citation) );
    }
    
    return $common_names;
}

/**
 * Run a webservice request (using caching)
 * @param string $term Arbitrary string, used for caching
 * @param string $url web-service address
 * @return string Web-service response 
 */
function _names_lookup_webservice_request($term, $url) {
    $response = "";

    // Check for a cached result
    $cache_result = cache_get($term, 'cache_names_col');
    if ($cache_result != false) {
        $response = $cache_result->data;
    } else {
        $response = file_get_contents($url);

        // Cache the result
        cache_set($term, $response, 'cache_names_col', time() + 86400 * variable_get('names_lookup_cache_time', 1) );
    }

    return $response;
}

function _names_lookup_soap_cache( $function_name, $parameter ) {
    $response = null;
    $cache_name = $function_name . " / " . $parameter;

    // Check for a cached result
    $cache_result = cache_get($cache_name, 'cache_names_pesi');
    if ($cache_result != false) {
        $response = unserialize($cache_result->data);
    } else {
        try {
            $soapClient = new SoapClient( "http://www.eu-nomen.eu/portal/soap.php?wsdl=1" );
            $response = $soapClient->$function_name( $parameter );

            // Cache the result
            cache_set($cache_name, serialize($response), 'cache_names_pesi', time() + 86400 * variable_get('names_lookup_cache_time', 1) );
        }
        catch( Exception $e ) {
        }
    }

    return $response;
}


/**
 * DRUPAL HOOK FUNCTIONS START
 */

/**
 * Implements caching functionality
 * @return array 
 */
function names_lookup_flush_caches() {
    return array('cache_names_col', 'cache_names_pesi');
}

/**
 * Implements hook_menu().
 */
function names_lookup_menu() {
    $items = array();

    $items['admin/config/search/names_lookup'] = array(
        'title' => 'Names Lookup',
        'description' => 'Configuration for the Names Lookup module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('names_lookup_config_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * Form function, called by drupal_get_form() 
 * in names_lookup_menu().
 */
function names_lookup_config_form($form, &$form_state) {
    $form['names_lookup_cache_time'] = array(
        '#type' => 'textfield',
        '#title' => t('Time to cache (days)'),
        '#default_value' => variable_get('names_lookup_cache_time', 1),
        '#size' => 3,
        '#maxlength' => 3,
        '#description' => t('The maximum age of a cached entry.'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Implements validation provided by the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function names_lookup_config_form_validate($form, &$form_state) {
    $max_num = $form_state['values']['names_lookup_cache_time'];
    if (!is_numeric($max_num)) {
        form_set_error('names_lookup_cache_time', t('You must enter an integer for the maximum age.'));
    } else if ($max_num <= 0) {
        form_set_error('names_lookup_cache_time', t('Maximum age must be positive.'));
    }
}

/**
 * DRUPAL HOOK FUNCTIONS END
 */
