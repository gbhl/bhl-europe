<?php

/**
 * implementation of hook menu
 * @return menu items array
 */
function file_import_menu() {

  $items['file_import'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_import_import_form'),
    'access arguments' => array('access administration pages'),
    'title' => 'File import',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['file_push'] = array(
    'page callback' => 'file_import_push',
    'title' => 'File push',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}


/**
 * expects a post with parameters:
 *  node
 *  id
 *  title
 *  collection or archive + set
 */
function file_import_push() {

  if(!isset($_POST)) {
    die("You forgot to post me something");
  }
  $key        = array_key_exists('key', $_REQUEST)? $_REQUEST['key'] : null;
  $node       = array_key_exists('node', $_POST)? $_POST['node'] : null;
  $id         = array_key_exists('id', $_POST)? $_POST['id'] : null;
  $title      = array_key_exists('title', $_POST)? $_POST['title'] : null;
  $collection = array_key_exists('collection', $_POST)? $_POST['collection'] : null;
  $collection_id = array_key_exists('collection_id', $_POST)? $_POST['collection_id'] : null;
  $archive    = array_key_exists('archive', $_POST)? $_POST['archive'] : null;
  $set        = array_key_exists('set', $_POST)? $_POST['set'] : null;

  //TODO check key = authorization
  
  if($node == null) {
    die("Usage: POST key, node, id, title, (collection OR archive + set)");
  }
  
  if($collection_id == null) {
    if($collection == null) {
      $collection = $archive . (is_array($set) && count($set) > 0? ':' . implode(':', $set) : '');
    } else {
      $set = explode(':', $collection);
      $archive = array_shift($set);
    }
    //TODO translate $collection into a $collection_id from the taxonomy
  }

  try {
    $r = file_import_insert_file($node, $collection_id, $id, $title);
    echo $r? "OK\n" : "NOT OK\n";
  } catch(Exception $ex) {
    die($ex->getMessage() ."\n" . $ex->getTraceAsString());
    drupal_set_message($ex->getMessage(),"error");
  }

  die( "" );
}


/**
 * form for importing files from a folder
 * @param <type> $form
 * @param <type> $form_state
 * @return form array
 */
function file_import_import_form($form, &$form_state) {

  $form['onserver'] = array(
    '#type' => 'fieldset', 
  );
  $form['onserver']['importFolder'] = array(
    '#type' => 'textfield',
    '#title' => t('import folder (on server):'),
  );
  $form['onserver']['submit'] = array(
    '#type' => 'submit',
    '#value' => ' OK ',
  );
  $form['sep'] = array(
    '#markup' => t('or'),
  );
  $form['upload'] = array(
    '#type' => 'fieldset',   
  );
  $form['upload']['uploadFile'] = array(
    '#type' => 'file',
    '#title' => t('upload ZIP (file names up to last dot are IDs, folders are collections):'),
  );
  $maxsize_post = eval(
    str_replace('g', '*1000000000',
    str_replace('m', '*1000000',
    str_replace('k', '*1000',
      strtolower(ini_get("post_max_size"))
      )))
    );
  $maxsize_filesize = eval(
    str_replace('g', '*1000000000',
    str_replace('m', '*1000000',
    str_replace('k', '*1000',
      strtolower(ini_get("upload_max_filesize"))
      )))
    );
  $maxsize = $maxsize_post > $maxsize_filesize? ini_get("post_max_size") : ini_get("upload_max_filesize");
  $form['upload']['hint'] = array(
    '#markup' => '<div>' . t("(maximum file size is limited to $maxsize)").'</div>',
  );
  $form['upload']['submit'] = array(
    '#type' => 'submit',
    '#value' => ' OK ',
  );

  return $form;
}


/**
 * import form submit handler
 * @param <type> $form
 * @param <type> $form_state
 */
function file_import_import_form_submit($form, &$form_state) {

  $path = $form_state['values']['importFolder'];
  if($path != "") {
    try {
      $inp = new SplFileObject($path);
      if($inp->isDir()) {
        $fso = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($inp, RecursiveIteratorIterator::SELF_FIRST));
        foreach($fso as $file) {
          if($file->isFile()) {
            $fn = substr($file, strlen($inp->getPath()) + 1);
            $parts = explode('/', $fn);
            $id = array_pop($parts);
            if(strpos($id, '.') !== false) {
              $id = substr($id, 0, strrpos($id, '.'));
            }
            $coll = file_import_get_collection_id($parts);
            try {
              file_import_insert_file(file_get_contents($file), $coll, $id);
            } catch(Exception $e) {
              drupal_set_message(t("Cannot import file $fn of $path:"), "error");
              drupal_set_message(t($e->getMessage()), "error");
            }
          }
        }
      } else {
        echo $inp ."\n";
        $fn = basename($inp);
        file_import_insert_file(file_get_contents($inp), null, $fn);
      }
    } catch(Exception $e) {
      drupal_set_message(t("File import:"), "error");
      drupal_set_message(t("No such directory $path."), "error");
    }
  } else {
    $fileName = @$_FILES['files']['name']['uploadFile'];
    if($fileName != "") {
      $filePath = $_FILES['files']['tmp_name']['uploadFile'];
      $fileSize = $_FILES['files']['size']['uploadFile'];
      $fh = zip_open($filePath);
      if(is_resource($fh)) {
        while( ($entry = zip_read($fh)) ) {
          if(zip_entry_open($fh, $entry)) {
            $fn = zip_entry_name($entry);
            $size = zip_entry_filesize($entry);
            if($size > 0) {
              $parts = explode('/', $fn);
              $content = zip_entry_read($entry, $size);
              $id = array_pop($parts);
              if(strpos($id, '.') !== false) {
                $id = substr($id, 0, strrpos($id, '.'));
              }
              $coll = file_import_get_collection_id($parts);
              try {
                file_import_insert_file($content, $coll, $id);
              } catch(Exception $e) {
                drupal_set_message(t("Cannot import file $fn of $fileName:"), "error");
                drupal_set_message(t($e->getMessage()), "error");
              }
            } else {
              // directory or empty
            }
            zip_entry_close($entry);
          }
        }
      } else {
        drupal_set_message(t("File import:"), "error");
        drupal_set_message(t("Not a ZIP archive: $fileName."), "error");
      }
    } else {
      drupal_set_message(t("File import:"), "error");
      drupal_set_message(t("No file specified. Nothing was done."), "error");
    }
  }
  return $form;
}

function file_import_get_collection_id(array $collNames, $parent = null) {
  $term = array_shift($collNames);
  if($parent === null) {
    $rs = db_query('SELECT t.tid '.
    'FROM {taxonomy_term_data} t '.
    'LEFT JOIN {taxonomy_vocabulary} v ON t.vid = v.vid '.
    'WHERE v.machine_name = :voc AND t.name LIKE :nam', 
    array(
      ':voc' => 'collections',
      ':nam' => $term));
  } else {
    $rs = db_query('SELECT t.tid '.
    'FROM {taxonomy_term_data} t '.
    'LEFT JOIN {taxonomy_term_hierarchy} h ON h.tid = t.tid '.
    'WHERE h.parent = :par AND t.name LIKE :nam', 
    array(
      ':par' => $parent,
      ':nam' => $term));
  }
  foreach($rs->fetchAll() as $tid) {
    file_import_get_collection_id($collNames, $tid);
  }
  return null;
}

/**
 * detects which metadata format a document has
 * @param DOMDocument $mdata metadata object to identify.
 * @returns one of { ['METS', null] ['ESE', ver] ['MODS', ver] ['REGNET', ver] }
 */
function file_import_identify(DOMDocument $mdata) {
  if($mdata->documentElement->nodeName == 'regnet-document') {
    $ver = $mdata->documentElement->getAttribute('version');
    return array('REGNET', $ver);
  } elseif($mdata->documentElement->namespaceURI == 'http://www.europeana.eu/schemas/ese/') {
    return array('ESE', 3.2);
  } elseif($mdata->documentElement->namespaceURI == 'http://www.loc.gov/METS/'
          && $mdata->documentElement->localName == 'mets') {
    return array('METS', null);
  } elseif($mdata->documentElement->namespaceURI == 'http://www.loc.gov/mods/v3') {
    return array('MODS', null);
  } else {
    $xpath = new DOMXPath($mdata);
    $xpath->registerNamespace("abcd", "http://www.tdwg.org/schemas/abcd/2.06");
    $dataset = $xpath->query("//abcd:DataSet");
    if($dataset->length > 0) {
      return array('ABCD', 2.06);
    }
  }
  return array(null, null);
}


/**
 * imports a node into drupal
 * @param <type> $content
 * @param <type> $collection_id A term ID from taxonomy collections.
 * @param <type> $id
 * @param <type> $title
 * @return <type>
 */
function file_import_insert_file($content, $collection_id = null, $id = null, $title = null) {
  // reading document

  $dom = new DOMDocument();
  @$dom->loadXML($content);
  if(!$dom->documentElement) {
    throw new Exception("Not a xml document");
  }

  $xpath = new DOMXpath($dom);
  $identified = file_import_identify($dom);
  switch($identified[0]) {
    case 'REGNET':
      $metsDom = file_import_import_regnet($dom, $xpath, $collection_id, $id, $title);
      break;
    case 'ESE':
      $xpath->registerNamespace("ese", "http://www.europeana.eu/schemas/ese/");
      $xpath->registerNamespace("dc", "http://purl.org/dc/elements/1.1/");
      $xpath->registerNamespace("dcterms", "http://purl.org/dc/terms/");
      $metsDom = file_import_import_ese($dom, $xpath, $collection_id, $id, $title);
      break;
    case 'METS':
      $xpath->registerNamespace("mets", "http://www.loc.gov/METS/");
      $metsDom = file_import_import_mets($dom, $xpath, $collection_id, $id, $title);
      break;
    case 'MODS':
      $xpath->registerNamespace("mets", "http://www.loc.gov/METS/");
      $xpath->registerNamespace("mods", "http://www.loc.gov/mods/v3");
      $metsDom = file_import_import_mods($dom, $xpath, $collection_id, $id, $title);
      break;
    case 'ABCD':
      $xpath->registerNamespace("abcd", "http://www.tdwg.org/schemas/abcd/2.06");
      $metsDom = file_import_import_abcd($dom, $xpath, $collection_id, $id, $title);
      break;
    default:
      throw new Exception("Unkown metadata format.");
  }
  if($metsDom == null) return false;

  file_import_save_node($metsDom, $collection_id, $id, $title);
  return true;
}


/**
 * ESE metadata format
 */
function file_import_import_ese(DOMDocument $node, DOMXpath $xpath, &$collection, &$id, &$title) {
  $idSet = $xpath->query("//dc:identifer");
  $titleSet = $xpath->query("//dc:title");

  if($id == null)    $id     = $idSet->item(0)->textContent;
  if($title == null) $title  = substr($titleSet->item(0)->textContent,0,250);

  $metsDataTag = file_import_new_mets_frame("ESE");
  $metsDom = $metsDataTag->ownerDocument;
  $importedNode = $metsDom->importNode($node->documentElement,TRUE);
  $metsDataTag->appendChild($importedNode);

  return $metsDom;
}

/**
 * ESE metadata format
 */
function file_import_import_abcd(DOMDocument $node, DOMXpath $xpath, &$collection, &$id, &$title) {
  $titleSet = $xpath->query("//abcd:Title");

  if($title == null) $title  = substr($titleSet->item(0)->textContent,0,250);

  $metsDataTag = file_import_new_mets_frame("ABCD");
  $metsDom = $metsDataTag->ownerDocument;
  foreach($xpath->query("//abcd:DataSets", $node->documentElement) as $datasets) {
    $importedNode = $metsDom->importNode($datasets,TRUE);
    $metsDataTag->appendChild($importedNode);
  }


  return $metsDom;
}


/**
 * REGNET metadata format
 */
function file_import_import_regnet(DOMDocument $node, DOMXpath $xpath, &$collection, &$id, &$title) {
    //TODO file_import_insert_file REGNET
  throw new Exception("TODO file_import_insert_file REGNET");

  /*
  $idSet = 	$xpath->query("//section[@name='oaiInfo']/oaiInternalId");
  $titleSet = 	$xpath->query("//section[@name='ESE']/ese-Title");

  if ($idSet->length != 1) {
    throw new Exception("File " . $file . " could not be importet. Number of ids: " . $idSet->length);
  }

  if ($titleSet->length < 1) {
    throw new Exception("File " . $file . " could not be importet. Number of titles:" . $titleSet->length);
  }

  if($id == null) $id 		= $idSet->item(0)->textContent;
  if($title == null) $title 		= substr($titleSet->item(0)->textContent,0,250);

  $metsDataTag = file_import_new_mets_frame();
  $metsDom = $metsDataTag->ownerDocument;
   *
   * TODO: transform regnet into....
   *
  $importedNode = $metsDom->importNode($node->documentElement,TRUE);
  $metsDataTag->appendChild($importedNode);

  return $metsDom;
   *
   */
}

/**
 * METS metadata format
 */
function file_import_import_mets(DOMDocument $node, DOMXpath $xpath, &$collection, &$id, &$title) {
  return $node;
}


/**
 * MODS metadata format
 */
function file_import_import_mods(DOMDocument $node, DOMXpath $xpath, &$collection, &$id, &$title) {
  $idSet = 		$xpath->query("//mods:identifier[@type='oai']");
  $titleSet = 	$xpath->query("//mods:titleInfo/mods:title");


  if ($idSet->length != 1) {
    throw new Exception("File " . $file . " could not be importet. Number of ids: " . $idSet->length);
  }

  if ($titleSet->length < 1) {
    throw new Exception("File " . $file . " could not be importet. Number of titles:" . $titleSet->length);
  }

  if($id == null) $id 		= $idSet->item(0)->textContent;
  if($title == null) $title 		= substr($titleSet->item(0)->textContent,0,250);

  $metsDataTag = file_import_new_mets_frame();
  $metsDom = $metsDataTag->ownerDocument;
  $importedNode = $metsDom->importNode($node->documentElement,TRUE);
  $metsDataTag->appendChild($importedNode);

  return $metsDom;
}


/**
 * loads the mets wrapper
 * @return metx:xmlData tag
 */
function file_import_new_mets_frame($type = "MODS") {
  $metsDom = new DOMDocument();
  $metsDom->load(dirname(__FILE__)."/../additional/mets_template.xml");

  $metsXpath = new DOMXpath($metsDom);
  $metsXpath->registerNamespace("mets", "http://www.loc.gov/METS/");

  $metsDataTag = $metsXpath->query("/mets:mets/mets:dmdSec/mets:mdWrap/mets:xmlData");
  if($metsDataTag->length != 1) {
    throw new Exception("mets template malformed");
  }
  $metsDataTag->item(0)->parentNode->setAttribute("MDTYPE", $type);
  return $metsDataTag->item(0);
}


/** Create node (overwrite or add it to the portal)
 *
 * @param DOMDocument $node The final xml to store (METS with our metadata sections)
 * @param int  $collection_id The Term ID from the taxonomy collections.
 * @param string  $id The unique object id (urn or something like that)
 * @param string	$title Drupal page title.
 */
function file_import_save_node(DOMDocument $node, $collection_id, $id, $title) {

  $nodeArray = array(
    'uid' => 0,
    'type' => 'bhle',
    'language' => LANGUAGE_NONE,
    'body' => array(
      'und' => array(
        '0' => array(
          'value' => $node->saveXML(),
          'format' => 'full_html',
    ))),
    'id' => array(
      'und' => array(
        '0' => array(
          'value' => $id,
    ))),
    'title' => $title,
    'status' => 1,
    'revision' => TRUE,
  );
  if($collection_id !== null) {
    $nodeArray['field_collection'][LANGUAGE_NONE][]['tid'] = $collection_id;
  }

  $nodeObject = (object) $nodeArray;

  file_import_enrich_with_nid_vid($nodeObject);
  node_submit($nodeObject);
  node_save($nodeObject);
}


/**
 * makes a lookup in the database whether a node with the same id already exists
 * if true, adds the nid, vid of the found node to the input nod,
 * in order to prepare it for a versionized import
 * @param <type> $node
 */
function file_import_enrich_with_nid_vid($node) {
  $id = $node->id['und'][0]['value'];
  $sql = 'SELECT * FROM {field_data_id} n WHERE n.id_value = :value';
  $result = db_query($sql, array(':value' => $id));
  $nids = array();
  $vids = array();

  foreach ($result as $row) {
    $nids[] = $row->entity_id;
    $vids[] = $row->revision_id;
  }

  switch (count(array_unique($nids))) {
    case 0:
      break;
    case 1:
      $node->nid = $nids[0];
      $node->vid = max($vids);
      //drupal_set_message("DEBUG: id found! id: " . $id . " nid: " . $nids[0] . " vid: " . max($vids));
      break;
    default:
      throw new Exception("Id has multiple occurrence in database. Id: " . $id);
  }
}
